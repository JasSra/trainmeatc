// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PilotSim.Data;

#nullable disable

namespace PilotSim.Data.Migrations
{
    [DbContext(typeof(SimDbContext))]
    partial class SimDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.9");

            modelBuilder.Entity("PilotSim.Data.Models.Airport", b =>
                {
                    b.Property<string>("Icao")
                        .HasColumnType("TEXT")
                        .HasColumnName("icao");

                    b.Property<string>("AppFreq")
                        .HasColumnType("TEXT")
                        .HasColumnName("app_freq");

                    b.Property<string>("AtisFreq")
                        .HasColumnType("TEXT")
                        .HasColumnName("atis_freq");

                    b.Property<string>("GroundFreq")
                        .HasColumnType("TEXT")
                        .HasColumnName("ground_freq");

                    b.Property<double?>("Lat")
                        .HasColumnType("REAL")
                        .HasColumnName("lat");

                    b.Property<double?>("Lon")
                        .HasColumnType("REAL")
                        .HasColumnName("lon");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<string>("TowerFreq")
                        .HasColumnType("TEXT")
                        .HasColumnName("tower_freq");

                    b.HasKey("Icao");

                    b.ToTable("airport", (string)null);
                });

            modelBuilder.Entity("PilotSim.Data.Models.Metric", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("K")
                        .HasColumnType("TEXT")
                        .HasColumnName("k");

                    b.Property<int?>("SessionId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("session_id");

                    b.Property<string>("TUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("t_utc");

                    b.Property<double?>("V")
                        .HasColumnType("REAL")
                        .HasColumnName("v");

                    b.HasKey("Id");

                    b.HasIndex("SessionId");

                    b.ToTable("metric", (string)null);
                });

            modelBuilder.Entity("PilotSim.Data.Models.Runway", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("AirportIcao")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("airport_icao");

                    b.Property<string>("Ident")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("ident");

                    b.Property<bool>("Ils")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ils");

                    b.Property<int?>("LengthM")
                        .HasColumnType("INTEGER")
                        .HasColumnName("length_m");

                    b.Property<int?>("MagneticHeading")
                        .HasColumnType("INTEGER")
                        .HasColumnName("magnetic_heading");

                    b.HasKey("Id");

                    b.HasIndex("AirportIcao");

                    b.ToTable("runway", (string)null);
                });

            modelBuilder.Entity("PilotSim.Data.Models.Scenario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("AirportIcao")
                        .HasColumnType("TEXT")
                        .HasColumnName("airport_icao");

                    b.Property<string>("Difficulty")
                        .HasColumnType("TEXT")
                        .HasColumnName("difficulty");

                    b.Property<string>("InitialStateJson")
                        .HasColumnType("TEXT")
                        .HasColumnName("initial_state_json");

                    b.Property<string>("Kind")
                        .HasColumnType("TEXT")
                        .HasColumnName("kind");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<string>("RubricJson")
                        .HasColumnType("TEXT")
                        .HasColumnName("rubric_json");

                    b.Property<int?>("Seed")
                        .HasColumnType("INTEGER")
                        .HasColumnName("seed");

                    b.HasKey("Id");

                    b.HasIndex("AirportIcao");

                    b.ToTable("scenario", (string)null);
                });

            modelBuilder.Entity("PilotSim.Data.Models.Session", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Difficulty")
                        .HasColumnType("TEXT")
                        .HasColumnName("difficulty");

                    b.Property<string>("EndedUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("ended_utc");

                    b.Property<string>("Outcome")
                        .HasColumnType("TEXT")
                        .HasColumnName("outcome");

                    b.Property<string>("ParametersJson")
                        .HasColumnType("TEXT")
                        .HasColumnName("parameters_json");

                    b.Property<int?>("ScenarioId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("scenario_id");

                    b.Property<int>("ScoreTotal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0)
                        .HasColumnName("score_total");

                    b.Property<string>("StartedUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("started_utc");

                    b.Property<int?>("UserId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("ScenarioId");

                    b.ToTable("session", (string)null);
                });

            modelBuilder.Entity("PilotSim.Data.Models.Turn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("AtcJson")
                        .HasColumnType("TEXT")
                        .HasColumnName("atc_json");

                    b.Property<int?>("Idx")
                        .HasColumnType("INTEGER")
                        .HasColumnName("idx");

                    b.Property<string>("InstructorJson")
                        .HasColumnType("TEXT")
                        .HasColumnName("instructor_json");

                    b.Property<int?>("SessionId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("session_id");

                    b.Property<string>("TtsAudioPath")
                        .HasColumnType("TEXT")
                        .HasColumnName("tts_audio_path");

                    b.Property<string>("UserAudioPath")
                        .HasColumnType("TEXT")
                        .HasColumnName("user_audio_path");

                    b.Property<string>("UserTranscript")
                        .HasColumnType("TEXT")
                        .HasColumnName("user_transcript");

                    b.Property<string>("Verdict")
                        .HasColumnType("TEXT")
                        .HasColumnName("verdict");

                    b.HasKey("Id");

                    b.HasIndex("SessionId");

                    b.ToTable("turn", (string)null);
                });

            modelBuilder.Entity("PilotSim.Data.Models.Metric", b =>
                {
                    b.HasOne("PilotSim.Data.Models.Session", "Session")
                        .WithMany("Metrics")
                        .HasForeignKey("SessionId");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("PilotSim.Data.Models.Runway", b =>
                {
                    b.HasOne("PilotSim.Data.Models.Airport", "Airport")
                        .WithMany("Runways")
                        .HasForeignKey("AirportIcao")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Airport");
                });

            modelBuilder.Entity("PilotSim.Data.Models.Scenario", b =>
                {
                    b.HasOne("PilotSim.Data.Models.Airport", "Airport")
                        .WithMany("Scenarios")
                        .HasForeignKey("AirportIcao");

                    b.Navigation("Airport");
                });

            modelBuilder.Entity("PilotSim.Data.Models.Session", b =>
                {
                    b.HasOne("PilotSim.Data.Models.Scenario", "Scenario")
                        .WithMany("Sessions")
                        .HasForeignKey("ScenarioId");

                    b.Navigation("Scenario");
                });

            modelBuilder.Entity("PilotSim.Data.Models.Turn", b =>
                {
                    b.HasOne("PilotSim.Data.Models.Session", "Session")
                        .WithMany("Turns")
                        .HasForeignKey("SessionId");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("PilotSim.Data.Models.Airport", b =>
                {
                    b.Navigation("Runways");

                    b.Navigation("Scenarios");
                });

            modelBuilder.Entity("PilotSim.Data.Models.Scenario", b =>
                {
                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("PilotSim.Data.Models.Session", b =>
                {
                    b.Navigation("Metrics");

                    b.Navigation("Turns");
                });
#pragma warning restore 612, 618
        }
    }
}
