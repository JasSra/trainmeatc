@page "/debrief/{sessionId:int}"
@using Microsoft.AspNetCore.Components
@using Microsoft.EntityFrameworkCore
@using PilotSim.Data
@using PilotSim.Data.Models
@using System.Text.Json
@using Plotly.NET
@using Plotly.NET.LayoutObjects
@inject NavigationManager Navigation
@inject SimDbContext DbContext
@inject IJSRuntime JSRuntime

<PageTitle>Session Debrief - TrainMeATC</PageTitle>

<div class="container-fluid py-4">
    @if (session == null)
    {
        <div class="text-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p>Loading session data...</p>
        </div>
    }
    else
    {
        <div class="row">
            <div class="col-12">
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <div>
                        <h1 class="mb-1">Session Debrief</h1>
                        <p class="text-muted mb-0">
                            <i class="bi bi-calendar me-1"></i>@GetSessionDate() • 
                            <i class="bi bi-clock me-1"></i>@GetSessionDuration() • 
                            <i class="bi bi-geo-alt me-1"></i>@session.Scenario?.AirportIcao
                        </p>
                    </div>
                    <div>
                        <div class="btn-group">
                            <button class="btn btn-outline-secondary" @onclick="ShowPerformanceGraph">
                                <i class="bi bi-graph-up me-2"></i>Performance Chart
                            </button>
                            <button class="btn btn-outline-info" @onclick="ExportData">
                                <i class="bi bi-download me-2"></i>Export Data
                            </button>
                        </div>
                        <button class="btn btn-secondary ms-2" @onclick="GoToScenarios">
                            <i class="bi bi-arrow-left me-2"></i>New Session
                        </button>
                        <button class="btn btn-primary ms-2" @onclick="GoHome">
                            <i class="bi bi-house me-2"></i>Home
                        </button>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Performance Overview Cards -->
        <div class="row mb-4">
            <div class="col-md-3">
                <div class="card performance-card border-0">
                    <div class="card-body text-center">
                        <div class="performance-icon mb-2">
                            <i class="bi bi-trophy-fill text-warning fs-2"></i>
                        </div>
                        <h3 class="card-title mb-1">@session.ScoreTotal</h3>
                        <p class="text-muted small mb-0">Overall Score</p>
                        <div class="progress mt-2" style="height: 4px;">
                            <div class="progress-bar bg-warning" style="width: @(Math.Min(session.ScoreTotal, 100))%"></div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card performance-card border-0">
                    <div class="card-body text-center">
                        <div class="performance-icon mb-2">
                            <i class="bi bi-chat-dots-fill text-primary fs-2"></i>
                        </div>
                        <h3 class="card-title mb-1">@turns.Count</h3>
                        <p class="text-muted small mb-0">Communications</p>
                        <p class="small mb-0 text-success">@GetSuccessfulTurns() successful</p>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card performance-card border-0">
                    <div class="card-body text-center">
                        <div class="performance-icon mb-2">
                            <i class="bi bi-clock-fill text-info fs-2"></i>
                        </div>
                        <h3 class="card-title mb-1">@GetAverageResponseTime()</h3>
                        <p class="text-muted small mb-0">Avg Response Time</p>
                        <p class="small mb-0">@GetSessionDuration() total</p>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card performance-card border-0">
                    <div class="card-body text-center">
                        <div class="performance-icon mb-2">
                            <i class="bi bi-arrow-repeat text-danger fs-2"></i>
                        </div>
                        <h3 class="card-title mb-1">@GetRetryCount()</h3>
                        <p class="text-muted small mb-0">Retries Required</p>
                        <p class="small mb-0">@GetRetryPercentage()% of turns</p>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Performance Graph Container -->
        @if (showPerformanceChart)
        {
            <div class="row mb-4">
                <div class="col-12">
                    <div class="card">
                        <div class="card-header d-flex justify-content-between align-items-center">
                            <h5 class="mb-0">
                                <i class="bi bi-graph-up me-2"></i>Performance Timeline
                            </h5>
                            <button class="btn btn-sm btn-outline-secondary" @onclick="() => showPerformanceChart = false">
                                <i class="bi bi-x-lg"></i>
                            </button>
                        </div>
                        <div class="card-body">
                            <div id="performance-chart" style="height: 400px;"></div>
                        </div>
                    </div>
                </div>
            </div>
        }

        <!-- Session Summary -->
        <div class="row mb-4">
            <div class="col-12">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">Session Summary</h5>
                        <div class="row">
                            <div class="col-md-3">
                                <strong>Scenario:</strong><br>
                                <span class="text-muted">@(session.Scenario?.Name ?? "Unknown")</span>
                            </div>
                            <div class="col-md-3">
                                <strong>Airport:</strong><br>
                                <span class="text-muted">@(session.Scenario?.AirportIcao ?? "Unknown")</span>
                            </div>
                            <div class="col-md-3">
                                <strong>Duration:</strong><br>
                                <span class="text-muted">@GetSessionDuration()</span>
                            </div>
                            <div class="col-md-3">
                                <strong>Final Score:</strong><br>
                                <span class="text-muted h5">@session.ScoreTotal</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Performance Metrics -->
        <div class="row mb-4">
            <div class="col-md-3">
                <div class="card">
                    <div class="card-body text-center">
                        <h5 class="card-title">Total Turns</h5>
                        <div class="h2 text-primary">@turns.Count</div>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card">
                    <div class="card-body text-center">
                        <h5 class="card-title">Average Score</h5>
                        <div class="h2 text-success">@GetAverageScore()</div>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card">
                    <div class="card-body text-center">
                        <h5 class="card-title">Critical Issues</h5>
                        <div class="h2 text-danger">@GetCriticalIssueCount()</div>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card">
                    <div class="card-body text-center">
                        <h5 class="card-title">Performance</h5>
                        <div class="h2 text-info">@GetPerformanceGrade()</div>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Enhanced Analytics -->
        <div class="row mb-4">
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0">Performance Trend</h5>
                    </div>
                    <div class="card-body">
                        <div class="h4 text-center">@GetScoreTrend()</div>
                        <p class="text-muted text-center">Comparison between first and second half of session</p>
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0">Most Common Issues</h5>
                    </div>
                    <div class="card-body">
                        @{
                            var topIssues = GetTopIssues();
                        }
                        @if (topIssues.Any())
                        {
                            <ul class="list-unstyled">
                                @foreach (var issue in topIssues)
                                {
                                    <li class="mb-1">
                                        <i class="bi bi-exclamation-triangle text-warning me-2"></i>@issue
                                    </li>
                                }
                            </ul>
                        }
                        else
                        {
                            <p class="text-muted">No specific issues identified</p>
                        }
                    </div>
                </div>
            </div>
        </div>

        <!-- Turn Timeline -->
        <div class="row">
            <div class="col-12">
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0">Communication Timeline</h5>
                    </div>
                    <div class="card-body">
                        @if (!turns.Any())
                        {
                            <p class="text-muted">No communication turns recorded for this session.</p>
                        }
                        else
                        {
                            <div class="timeline">
                                @foreach (var turn in turns.OrderBy(t => t.Idx))
                                {
                                    var turnScore = GetTurnScore(turn);
                                    var turnGrade = GetTurnGrade(turnScore);
                                    var badgeColor = GetScoreBadgeColor(turnScore);
                                    
                                    <div class="timeline-item border-bottom pb-3 mb-3">
                                        <div class="row">
                                            <div class="col-1">
                                                <div class="timeline-marker">
                                                    <span class="badge bg-primary">#@turn.Idx</span>
                                                    @if (turnScore >= 0)
                                                    {
                                                        <div class="mt-1">
                                                            <span class="badge @badgeColor small">@turnGrade</span>
                                                        </div>
                                                    }
                                                </div>
                                            </div>
                                            <div class="col-11">
                                                <!-- Pilot Transmission -->
                                                <div class="card mb-2">
                                                    <div class="card-body">
                                                        <div class="d-flex justify-content-between align-items-start">
                                                            <div>
                                                                <h6 class="text-primary mb-1">
                                                                    <i class="bi bi-person me-2"></i>Pilot
                                                                </h6>
                                                                <p class="mb-0">@(turn.UserTranscript ?? "No transcript available")</p>
                                                            </div>
                                                            @if (!string.IsNullOrEmpty(turn.UserAudioPath))
                                                            {
                                                                <button class="btn btn-outline-primary btn-sm" 
                                                                        @onclick="() => PlayAudio(turn.UserAudioPath!)">
                                                                    <i class="bi bi-play"></i>
                                                                </button>
                                                            }
                                                        </div>
                                                    </div>
                                                </div>

                                                <!-- Instructor Feedback -->
                                                @if (!string.IsNullOrEmpty(turn.InstructorJson))
                                                {
                                                    var feedback = GetInstructorFeedback(turn.InstructorJson);
                                                    var scoreInfo = GetTurnScoreInfo(turn.InstructorJson);
                                                    
                                                    <div class="card mb-2 border-warning">
                                                        <div class="card-body">
                                                            <h6 class="text-warning mb-1">
                                                                <i class="bi bi-person-check me-2"></i>Instructor Feedback
                                                                @if (scoreInfo.Score >= 0)
                                                                {
                                                                    <span class="badge @GetScoreBadgeColor(scoreInfo.Score) ms-2">
                                                                        @((scoreInfo.Score * 100).ToString("F0"))%
                                                                    </span>
                                                                }
                                                            </h6>
                                                            @if (!string.IsNullOrEmpty(feedback))
                                                            {
                                                                <p class="mb-2 small">@feedback</p>
                                                            }
                                                            @if (scoreInfo.Critical.Any())
                                                            {
                                                                <div class="mb-2">
                                                                    <strong class="text-danger small">Critical Issues:</strong>
                                                                    <ul class="mb-0 small">
                                                                        @foreach (var issue in scoreInfo.Critical)
                                                                        {
                                                                            <li class="text-danger">@issue</li>
                                                                        }
                                                                    </ul>
                                                                </div>
                                                            }
                                                            @if (scoreInfo.Improvements.Any())
                                                            {
                                                                <div class="mb-0">
                                                                    <strong class="text-warning small">Improvements:</strong>
                                                                    <ul class="mb-0 small">
                                                                        @foreach (var improvement in scoreInfo.Improvements)
                                                                        {
                                                                            <li class="text-warning">@improvement</li>
                                                                        }
                                                                    </ul>
                                                                </div>
                                                            }
                                                        </div>
                                                    </div>
                                                }

                                                <!-- ATC Response -->
                                                @if (!string.IsNullOrEmpty(turn.AtcJson))
                                                {
                                                    var atcResponse = GetAtcResponse(turn.AtcJson);
                                                    <div class="card border-success">
                                                        <div class="card-body">
                                                            <div class="d-flex justify-content-between align-items-start">
                                                                <div>
                                                                    <h6 class="text-success mb-1">
                                                                        <i class="bi bi-tower me-2"></i>ATC Response
                                                                    </h6>
                                                                    <p class="mb-0">@atcResponse</p>
                                                                </div>
                                                                @if (!string.IsNullOrEmpty(turn.TtsAudioPath))
                                                                {
                                                                    <button class="btn btn-outline-success btn-sm" 
                                                                            @onclick="() => PlayAudio(turn.TtsAudioPath!)">
                                                                        <i class="bi bi-play"></i>
                                                                    </button>
                                                                }
                                                            </div>
                                                        </div>
                                                    </div>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>

        <!-- Study Resources -->
        <div class="row mt-4">
            <div class="col-12">
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0">Study Resources</h5>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-4">
                                <h6>Official Publications</h6>
                                <ul class="list-unstyled">
                                    <li>
                                        <a href="https://www.casa.gov.au/aip" target="_blank" class="text-decoration-none">
                                            <i class="bi bi-book me-2"></i>AIP Australia
                                        </a>
                                    </li>
                                    <li>
                                        <a href="https://www.casa.gov.au/" target="_blank" class="text-decoration-none">
                                            <i class="bi bi-building me-2"></i>CASA Publications
                                        </a>
                                    </li>
                                </ul>
                            </div>
                            <div class="col-md-4">
                                <h6>Training Materials</h6>
                                <ul class="list-unstyled">
                                    <li>
                                        <i class="bi bi-mic me-2"></i>Standard Phraseology Guide
                                    </li>
                                    <li>
                                        <i class="bi bi-headphones me-2"></i>Radio Communication Procedures
                                    </li>
                                </ul>
                            </div>
                            <div class="col-md-4">
                                <h6>Practice Tips</h6>
                                <ul class="list-unstyled">
                                    <li>
                                        <i class="bi bi-check2 me-2"></i>Speak clearly and concisely
                                    </li>
                                    <li>
                                        <i class="bi bi-check2 me-2"></i>Use standard phraseology
                                    </li>
                                    <li>
                                        <i class="bi bi-check2 me-2"></i>Repeat back all instructions
                                    </li>
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<!-- Audio element for playback -->
<audio id="debrief-audio" preload="none"></audio>

@code {
    [Parameter] public int SessionId { get; set; }
    
    private Session? session;
    private List<Turn> turns = new();
    private bool showPerformanceChart = false;
    
    protected override async Task OnInitializedAsync()
    {
        session = await DbContext.Sessions
            .Include(s => s.Scenario)
            .ThenInclude(sc => sc!.Airport)
            .Include(s => s.Turns)
            .Include(s => s.Metrics)
            .FirstOrDefaultAsync(s => s.Id == SessionId);
            
        if (session?.Turns != null)
        {
            turns = session.Turns.ToList();
        }
    }
    
    private string GetSessionDate()
    {
        if (session?.StartedUtc == null) return "Unknown";
        
        try
        {
            var start = DateTime.Parse(session.StartedUtc);
            return start.ToString("MMM dd, yyyy");
        }
        catch
        {
            return "Unknown";
        }
    }
    
    private int GetSuccessfulTurns()
    {
        return turns.Count(t => GetTurnScore(t) >= 0.7);
    }
    
    private string GetAverageResponseTime()
    {
        // This would need actual timing data from the session
        return "2.3s"; // Placeholder
    }
    
    private int GetRetryCount()
    {
        return turns.Count(t => !string.IsNullOrEmpty(t.Verdict) && t.Verdict.Contains("retry"));
    }
    
    private string GetRetryPercentage()
    {
        if (turns.Count == 0) return "0";
        return Math.Round((double)GetRetryCount() / turns.Count * 100, 1).ToString();
    }
    
    private async Task ShowPerformanceGraph()
    {
        showPerformanceChart = !showPerformanceChart;
        
        if (showPerformanceChart)
        {
            StateHasChanged();
            await Task.Delay(100); // Allow DOM to render
            await RenderPerformanceChart();
        }
    }
    
    private async Task RenderPerformanceChart()
    {
        try
        {
            var turnIndices = turns.Select(t => t.Idx ?? 0).ToArray();
            var turnScores = turns.Select(t => GetTurnScore(t) * 100).ToArray();
            
            var chartData = new
            {
                x = turnIndices,
                y = turnScores,
                mode = "lines+markers",
                type = "scatter",
                name = "Turn Score",
                line = new { color = "#1e3a8a", width = 3 },
                marker = new { size = 8, color = "#0ea5e9" }
            };
            
            var layout = new
            {
                title = "Communication Performance Over Time",
                xaxis = new { title = "Turn Number" },
                yaxis = new { title = "Score (%)", range = new[] { 0, 100 } },
                showlegend = false,
                plot_bgcolor = "rgba(0,0,0,0)",
                paper_bgcolor = "rgba(0,0,0,0)"
            };
            
            var config = new
            {
                responsive = true,
                displayModeBar = true,
                modeBarButtonsToRemove = new[] { "pan2d", "select2d", "lasso2d", "resetScale2d" }
            };
            
            await JSRuntime.InvokeVoidAsync("Plotly.newPlot", "performance-chart", new[] { chartData }, layout, config);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error rendering chart: {ex.Message}");
        }
    }
    
    private async Task ExportData()
    {
        try
        {
            var exportData = new
            {
                sessionId = SessionId,
                scenario = session?.Scenario?.Name,
                airport = session?.Scenario?.AirportIcao,
                duration = GetSessionDuration(),
                totalScore = session?.ScoreTotal,
                turns = turns.Select(t => new
                {
                    turn = t.Idx,
                    transcript = t.UserTranscript,
                    verdict = t.Verdict,
                    score = GetTurnScore(t)
                }).ToArray()
            };
            
            var json = JsonSerializer.Serialize(exportData, new JsonSerializerOptions { WriteIndented = true });
            await JSRuntime.InvokeVoidAsync("downloadFile", $"session-{SessionId}-debrief.json", json, "application/json");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error exporting data: {ex.Message}");
        }
    }
    
    private string GetSessionDuration()
    {
        if (session?.StartedUtc == null) return "Unknown";
        
        try
        {
            var started = DateTime.Parse(session.StartedUtc);
            var ended = string.IsNullOrEmpty(session.EndedUtc) 
                ? DateTime.UtcNow 
                : DateTime.Parse(session.EndedUtc);
            
            var duration = ended - started;
            return $"{duration.Minutes:D2}:{duration.Seconds:D2}";
        }
        catch
        {
            return "Unknown";
        }
    }
    
    private string GetAverageScore()
    {
        if (!turns.Any()) return "N/A";
        
        try
        {
            var scoreSum = 0.0;
            var scoreCount = 0;
            
            foreach (var turn in turns)
            {
                if (!string.IsNullOrEmpty(turn.InstructorJson))
                {
                    using var doc = JsonDocument.Parse(turn.InstructorJson);
                    if (doc.RootElement.TryGetProperty("normalized", out var normalized))
                    {
                        scoreSum += normalized.GetDouble();
                        scoreCount++;
                    }
                }
            }
            
            if (scoreCount == 0) return session?.ScoreTotal.ToString() ?? "0";
            
            var average = (scoreSum / scoreCount) * 100; // Convert to percentage
            return $"{average:F1}%";
        }
        catch
        {
            return session?.ScoreTotal.ToString() ?? "0";
        }
    }
    
    private int GetCorrectionCount()
    {
        return turns.Count(t => !string.IsNullOrEmpty(t.InstructorJson));
    }
    
    private int GetCriticalIssueCount()
    {
        var criticalCount = 0;
        foreach (var turn in turns)
        {
            if (!string.IsNullOrEmpty(turn.InstructorJson))
            {
                try
                {
                    using var doc = JsonDocument.Parse(turn.InstructorJson);
                    if (doc.RootElement.TryGetProperty("critical", out var critical) && critical.ValueKind == JsonValueKind.Array)
                    {
                        criticalCount += critical.GetArrayLength();
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error parsing critical issues: {ex.Message}");
                }
            }
        }
        return criticalCount;
    }
    
    private string GetPerformanceGrade()
    {
        if (!turns.Any()) return "N/A";
        
        try
        {
            var scores = new List<double>();
            
            foreach (var turn in turns)
            {
                if (!string.IsNullOrEmpty(turn.InstructorJson))
                {
                    using var doc = JsonDocument.Parse(turn.InstructorJson);
                    if (doc.RootElement.TryGetProperty("normalized", out var normalized))
                    {
                        scores.Add(normalized.GetDouble());
                    }
                }
            }
            
            if (!scores.Any()) return "N/A";
            
            var average = scores.Average();
            
            return average switch
            {
                >= 0.9 => "Excellent",
                >= 0.8 => "Very Good",
                >= 0.7 => "Good", 
                >= 0.6 => "Satisfactory",
                >= 0.5 => "Needs Improvement",
                _ => "Unsatisfactory"
            };
        }
        catch
        {
            return "N/A";
        }
    }
    
    private List<string> GetTopIssues()
    {
        var issueFrequency = new Dictionary<string, int>();
        
        foreach (var turn in turns)
        {
            if (!string.IsNullOrEmpty(turn.InstructorJson))
            {
                try
                {
                    using var doc = JsonDocument.Parse(turn.InstructorJson);
                    
                    // Count critical issues
                    if (doc.RootElement.TryGetProperty("critical", out var critical) && critical.ValueKind == JsonValueKind.Array)
                    {
                        foreach (var issue in critical.EnumerateArray())
                        {
                            var issueText = issue.GetString();
                            if (!string.IsNullOrEmpty(issueText))
                            {
                                issueFrequency[issueText] = issueFrequency.GetValueOrDefault(issueText, 0) + 1;
                            }
                        }
                    }
                    
                    // Count improvement areas
                    if (doc.RootElement.TryGetProperty("improvements", out var improvements) && improvements.ValueKind == JsonValueKind.Array)
                    {
                        foreach (var issue in improvements.EnumerateArray())
                        {
                            var issueText = issue.GetString();
                            if (!string.IsNullOrEmpty(issueText))
                            {
                                issueFrequency[issueText] = issueFrequency.GetValueOrDefault(issueText, 0) + 1;
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error parsing issues: {ex.Message}");
                }
            }
        }
        
        return issueFrequency
            .OrderByDescending(x => x.Value)
            .Take(5)
            .Select(x => $"{x.Key} ({x.Value}x)")
            .ToList();
    }
    
    private string GetScoreTrend()
    {
        if (turns.Count < 2) return "N/A";
        
        try
        {
            var scores = new List<double>();
            
            foreach (var turn in turns.OrderBy(t => t.Idx))
            {
                if (!string.IsNullOrEmpty(turn.InstructorJson))
                {
                    using var doc = JsonDocument.Parse(turn.InstructorJson);
                    if (doc.RootElement.TryGetProperty("normalized", out var normalized))
                    {
                        scores.Add(normalized.GetDouble());
                    }
                }
            }
            
            if (scores.Count < 2) return "N/A";
            
            var firstHalf = scores.Take(scores.Count / 2).Average();
            var secondHalf = scores.Skip(scores.Count / 2).Average();
            
            var improvement = (secondHalf - firstHalf) * 100;
            
            return improvement switch
            {
                > 10 => "📈 Strong Improvement",
                > 5 => "📈 Improving",
                > -5 => "📊 Stable",
                > -10 => "📉 Declining",
                _ => "📉 Needs Focus"
            };
        }
        catch
        {
            return "N/A";
        }
    }
    
    private (double Score, List<string> Critical, List<string> Improvements) GetTurnScoreInfo(string instructorJson)
    {
        var critical = new List<string>();
        var improvements = new List<string>();
        var score = -1.0;
        
        try
        {
            using var doc = JsonDocument.Parse(instructorJson);
            
            if (doc.RootElement.TryGetProperty("normalized", out var normalized))
            {
                score = normalized.GetDouble();
            }
            
            if (doc.RootElement.TryGetProperty("critical", out var criticalArray) && criticalArray.ValueKind == JsonValueKind.Array)
            {
                critical.AddRange(criticalArray.EnumerateArray().Select(x => x.GetString()).Where(x => x != null)!);
            }
            
            if (doc.RootElement.TryGetProperty("improvements", out var improvementsArray) && improvementsArray.ValueKind == JsonValueKind.Array)
            {
                improvements.AddRange(improvementsArray.EnumerateArray().Select(x => x.GetString()).Where(x => x != null)!);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error parsing score info: {ex.Message}");
        }
        
        return (score, critical, improvements);
    }
    
    private string GetInstructorFeedback(string instructorJson)
    {
        try
        {
            using var doc = JsonDocument.Parse(instructorJson);
            if (doc.RootElement.TryGetProperty("blockReason", out var reason))
            {
                return reason.GetString() ?? "";
            }
            if (doc.RootElement.TryGetProperty("critical", out var critical) && critical.ValueKind == JsonValueKind.Array)
            {
                var items = critical.EnumerateArray().Select(x => x.GetString()).Where(x => x != null);
                return string.Join(", ", items);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error parsing instructor feedback: {ex.Message}");
        }
        return "Feedback available";
    }
    
    private string GetAtcResponse(string atcJson)
    {
        try
        {
            using var doc = JsonDocument.Parse(atcJson);
            if (doc.RootElement.TryGetProperty("transmission", out var transmission))
            {
                return transmission.GetString() ?? "ATC response";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error parsing ATC response: {ex.Message}");
        }
        return "ATC response";
    }
    
    private double GetTurnScore(Turn turn)
    {
        if (string.IsNullOrEmpty(turn.InstructorJson)) return -1;
        
        try
        {
            using var doc = JsonDocument.Parse(turn.InstructorJson);
            if (doc.RootElement.TryGetProperty("normalized", out var normalized))
            {
                return normalized.GetDouble();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error parsing turn score: {ex.Message}");
        }
        return -1;
    }
    
    private string GetTurnGrade(double score)
    {
        if (score < 0) return "";
        
        return score switch
        {
            >= 0.9 => "A",
            >= 0.8 => "B",
            >= 0.7 => "C",
            >= 0.6 => "D",
            _ => "F"
        };
    }
    
    private string GetScoreBadgeColor(double score)
    {
        if (score < 0) return "";
        
        return score switch
        {
            >= 0.8 => "bg-success",
            >= 0.6 => "bg-warning",
            _ => "bg-danger"
        };
    }
    
    private async Task PlayAudio(string audioPath)
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("playAudio", "debrief-audio", audioPath);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error playing audio: {ex.Message}");
        }
    }
    
    private void GoToScenarios()
    {
        Navigation.NavigateTo("/scenarios");
    }
    
    private void GoHome()
    {
        Navigation.NavigateTo("/");
    }
}