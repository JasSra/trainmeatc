@page "/aircraft"
@using PilotSim.Data
@using PilotSim.Data.Models
@using Microsoft.EntityFrameworkCore
@inject SimDbContext DbContext

<PageTitle>Aircraft Profiles - TrainMeATC</PageTitle>

<div class="d-flex justify-content-between align-items-center mb-4">
    <div>
        <h1 class="mb-2">
            <i class="bi bi-airplane-engines me-3"></i>Aircraft Profiles
        </h1>
        <p class="text-muted mb-0">Comprehensive database of training aircraft and their specifications</p>
    </div>
    <div class="d-flex gap-2">
        <button class="btn btn-outline-primary" @onclick="@(() => selectedCategory = null)">
            <i class="bi bi-filter me-1"></i>All Categories
        </button>
        <div class="btn-group" role="group">
            <button class="btn @(selectedCategory == "GA" ? "btn-primary" : "btn-outline-primary")" 
                    @onclick="@(() => selectedCategory = "GA")">GA</button>
            <button class="btn @(selectedCategory == "Medium" ? "btn-primary" : "btn-outline-primary")" 
                    @onclick="@(() => selectedCategory = "Medium")">Medium</button>
            <button class="btn @(selectedCategory == "Heavy" ? "btn-primary" : "btn-outline-primary")" 
                    @onclick="@(() => selectedCategory = "Heavy")">Heavy</button>
        </div>
    </div>
</div>

@if (isLoading)
{
    <div class="text-center py-5">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading aircraft...</span>
        </div>
        <p class="mt-3 text-muted">Loading aircraft profiles...</p>
    </div>
}
else
{
    <div class="row">
        @foreach (var aircraft in filteredAircraft)
        {
            <div class="col-lg-4 col-md-6 mb-4">
                <div class="card h-100">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <div>
                            <h5 class="mb-0 fw-bold">@aircraft.Type</h5>
                            <small class="text-muted">@aircraft.Manufacturer</small>
                        </div>
                        <div class="d-flex flex-column align-items-end gap-1">
                            <span class="badge @GetCategoryBadgeClass(aircraft.Category)">
                                @aircraft.Category
                            </span>
                            <span class="badge bg-secondary">
                                @aircraft.WakeCategory
                            </span>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="row text-center mb-3">
                            <div class="col-4">
                                <small class="text-muted d-block">Cruise Speed</small>
                                <strong>@(aircraft.CruiseSpeed?.ToString() ?? "N/A") kts</strong>
                            </div>
                            <div class="col-4">
                                <small class="text-muted d-block">Service Ceiling</small>
                                <strong>@(FormatAltitude(aircraft.ServiceCeiling))</strong>
                            </div>
                            <div class="col-4">
                                <small class="text-muted d-block">Seats</small>
                                <strong>@(aircraft.SeatCapacity?.ToString() ?? "N/A")</strong>
                            </div>
                        </div>

                        <div class="mb-3">
                            <h6 class="mb-2">
                                <i class="bi bi-gear me-1"></i>Specifications
                            </h6>
                            <div class="d-flex flex-wrap gap-2">
                                @if (!string.IsNullOrEmpty(aircraft.EngineType))
                                {
                                    <span class="badge bg-info">
                                        <i class="bi bi-lightning me-1"></i>@aircraft.EngineType
                                    </span>
                                }
                                @if (!string.IsNullOrEmpty(aircraft.CallsignPrefix))
                                {
                                    <span class="badge bg-primary">
                                        <i class="bi bi-tag me-1"></i>@aircraft.CallsignPrefix
                                    </span>
                                }
                                @if (aircraft.SupportsSimConnect)
                                {
                                    <span class="badge bg-success">
                                        <i class="bi bi-plugin me-1"></i>MSFS SimConnect
                                    </span>
                                }
                            </div>
                        </div>

                        @if (aircraft.TrafficProfiles.Any())
                        {
                            <div class="mb-3">
                                <h6 class="mb-2">
                                    <i class="bi bi-airplane me-1"></i>Common Callsigns
                                </h6>
                                <div class="d-flex flex-wrap gap-1">
                                    @foreach (var profile in aircraft.TrafficProfiles.Take(4))
                                    {
                                        <code class="small">@profile.Callsign</code>
                                    }
                                    @if (aircraft.TrafficProfiles.Count > 4)
                                    {
                                        <small class="text-muted">+@(aircraft.TrafficProfiles.Count - 4) more</small>
                                    }
                                </div>
                            </div>
                        }

                        <div>
                            <h6 class="mb-2">
                                <i class="bi bi-map me-1"></i>Operating Airports
                            </h6>
                            @if (aircraft.TrafficProfiles.Any())
                            {
                                <div class="d-flex flex-wrap gap-1">
                                    @foreach (var airport in aircraft.TrafficProfiles.Select(tp => tp.AirportIcao).Distinct().Take(6))
                                    {
                                        <span class="badge bg-secondary small">@airport</span>
                                    }
                                    @if (aircraft.TrafficProfiles.Select(tp => tp.AirportIcao).Distinct().Count() > 6)
                                    {
                                        <small class="text-muted">+@(aircraft.TrafficProfiles.Select(tp => tp.AirportIcao).Distinct().Count() - 6) more</small>
                                    }
                                </div>
                            }
                            else
                            {
                                <small class="text-muted">No traffic profiles configured</small>
                            }
                        </div>
                    </div>
                    <div class="card-footer d-flex justify-content-between align-items-center">
                        <div class="d-flex gap-2">
                            @{
                                var iconClass = GetAircraftIcon(aircraft.Category, aircraft.EngineType);
                            }
                            <i class="@iconClass text-primary"></i>
                            <small class="text-muted">@GetAircraftDescription(aircraft)</small>
                        </div>
                        <button class="btn btn-sm btn-outline-primary" @onclick="@(() => ShowAircraftDetails(aircraft))">
                            <i class="bi bi-info-circle me-1"></i>Details
                        </button>
                    </div>
                </div>
            </div>
        }
    </div>

    @if (!filteredAircraft.Any())
    {
        <div class="text-center py-5">
            <i class="bi bi-airplane-engines display-1 text-muted"></i>
            <h3 class="mt-3 text-muted">No aircraft found</h3>
            <p class="text-muted">Try adjusting your category filter</p>
        </div>
    }
}

@if (selectedAircraft != null)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="bi bi-airplane-engines me-2"></i>
                        @selectedAircraft.Type - @selectedAircraft.Manufacturer
                    </h5>
                    <button type="button" class="btn-close" @onclick="@(() => selectedAircraft = null)"></button>
                </div>
                <div class="modal-body">
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <h6>Performance</h6>
                            <table class="table table-sm">
                                <tr>
                                    <td>Cruise Speed:</td>
                                    <td><strong>@(selectedAircraft.CruiseSpeed?.ToString() ?? "N/A") knots</strong></td>
                                </tr>
                                <tr>
                                    <td>Service Ceiling:</td>
                                    <td><strong>@FormatAltitude(selectedAircraft.ServiceCeiling)</strong></td>
                                </tr>
                                <tr>
                                    <td>Engine Type:</td>
                                    <td><strong>@(selectedAircraft.EngineType ?? "N/A")</strong></td>
                                </tr>
                                <tr>
                                    <td>Seat Capacity:</td>
                                    <td><strong>@(selectedAircraft.SeatCapacity?.ToString() ?? "N/A")</strong></td>
                                </tr>
                            </table>
                        </div>
                        <div class="col-md-6">
                            <h6>Classification</h6>
                            <table class="table table-sm">
                                <tr>
                                    <td>Category:</td>
                                    <td><span class="badge @GetCategoryBadgeClass(selectedAircraft.Category)">@selectedAircraft.Category</span></td>
                                </tr>
                                <tr>
                                    <td>Wake Category:</td>
                                    <td><span class="badge bg-secondary">@selectedAircraft.WakeCategory</span></td>
                                </tr>
                                <tr>
                                    <td>Callsign Prefix:</td>
                                    <td><code>@selectedAircraft.CallsignPrefix</code></td>
                                </tr>
                            </table>
                        </div>
                    </div>
                    
                    @if (selectedAircraft.TrafficProfiles.Any())
                    {
                        <h6>Traffic Profiles</h6>
                        <div class="table-responsive">
                            <table class="table table-sm">
                                <thead>
                                    <tr>
                                        <th>Airport</th>
                                        <th>Callsign</th>
                                        <th>Flight Type</th>
                                        <th>Route</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var profile in selectedAircraft.TrafficProfiles.Take(10))
                                    {
                                        <tr>
                                            <td><code>@profile.AirportIcao</code></td>
                                            <td><code>@profile.Callsign</code></td>
                                            <td><span class="badge bg-info">@profile.FlightType</span></td>
                                            <td><small class="text-muted">@profile.Route</small></td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="@(() => selectedAircraft = null)">Close</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<Aircraft> aircraft = new();
    private string? selectedCategory = null;
    private bool isLoading = true;
    private Aircraft? selectedAircraft = null;

    private IEnumerable<Aircraft> filteredAircraft =>
        selectedCategory == null 
            ? aircraft 
            : aircraft.Where(a => a.Category == selectedCategory);

    protected override async Task OnInitializedAsync()
    {
        try
        {
            aircraft = await DbContext.Aircraft
                .Include(a => a.TrafficProfiles)
                .OrderBy(a => a.Category)
                .ThenBy(a => a.Manufacturer)
                .ThenBy(a => a.Type)
                .ToListAsync();
        }
        catch (Exception)
        {
            aircraft = new List<Aircraft>();
        }
        finally
        {
            isLoading = false;
        }
    }

    private string GetCategoryBadgeClass(string category) => category switch
    {
        "GA" => "bg-success",
        "Medium" => "bg-warning",
        "Heavy" => "bg-danger",
        _ => "bg-secondary"
    };

    private string GetAircraftIcon(string category, string? engineType) => (category, engineType) switch
    {
        ("GA", "Piston") => "bi bi-airplane",
        ("Medium", "Turboprop") => "bi bi-airplane-engines",
        ("Medium", "Jet") => "bi bi-airplane-engines",
        ("Heavy", _) => "bi bi-airplane-engines-fill",
        _ => "bi bi-airplane"
    };

    private string GetAircraftDescription(Aircraft aircraft) => aircraft.Category switch
    {
        "GA" => "General Aviation",
        "Medium" => "Commercial/Regional",
        "Heavy" => "Wide-body/Long-haul",
        _ => "Aircraft"
    };

    private string FormatAltitude(int? altitude) => 
        altitude?.ToString("N0") + " ft" ?? "N/A";

    private void ShowAircraftDetails(Aircraft aircraft)
    {
        selectedAircraft = aircraft;
    }
}