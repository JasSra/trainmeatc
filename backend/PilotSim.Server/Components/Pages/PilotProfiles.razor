@page "/pilots"
@using PilotSim.Data
@using PilotSim.Data.Models
@using PilotSim.Core
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.SignalR.Client
@inject SimDbContext DbContext
@inject HttpClient Http 
@inject IJSRuntime JSRuntime
@inject ILogger<PilotProfiles> Logger
@implements IAsyncDisposable

<PageTitle>Pilot Profiles - TrainMeATC</PageTitle>

<div class="d-flex justify-content-between align-items-center mb-4">
    <div>
        <h1 class="mb-2">
            <i class="bi bi-person-badge me-3"></i>Pilot Profiles
        </h1>
        <p class="text-muted mb-0">Manage pilot profiles with live MSFS integration</p>
    </div>
    <div class="d-flex gap-2">
        <!-- SimConnect Status -->
        <div class="card border-0 bg-light">
            <div class="card-body py-2 px-3">
                <div class="d-flex align-items-center gap-2">
                    <i class="bi @(simConnectStatus?.IsConnected == true ? "bi-circle-fill text-success" : "bi-circle text-secondary")"></i>
                    <small class="fw-medium">
                        @(simConnectStatus?.IsConnected == true ? "MSFS Connected" : "MSFS Disconnected")
                    </small>
                    @if (simConnectStatus?.IsConnected == true)
                    {
                        <span class="badge bg-info">@simConnectStatus.ActiveAircraftCount aircraft</span>
                    }
                </div>
            </div>
        </div>
        
        <button class="btn btn-outline-primary" @onclick="RefreshData">
            <i class="bi bi-arrow-clockwise me-1"></i>Refresh
        </button>
        <button class="btn btn-primary" @onclick="ShowCreateModal">
            <i class="bi bi-plus-lg me-1"></i>New Pilot
        </button>
    </div>
</div>

@if (isLoading)
{
    <div class="text-center py-5">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p class="text-muted mt-2">Loading pilot profiles...</p>
    </div>
}
else
{
    <div class="row">
        <!-- Live Pilots Section -->
        @if (livePilots.Any())
        {
            <div class="col-12 mb-4">
                <div class="card border-success">
                    <div class="card-header bg-success text-white">
                        <h5 class="mb-0">
                            <i class="bi bi-broadcast me-2"></i>Live Pilots (@livePilots.Count)
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            @foreach (var pilot in livePilots)
                            {
                                <div class="col-md-6 col-lg-4 mb-3">
                                    <div class="card border-success">
                                        <div class="card-body">
                                            <div class="d-flex justify-content-between align-items-start mb-2">
                                                <div>
                                                    <h6 class="mb-1 fw-bold">@pilot.Callsign</h6>
                                                    <small class="text-muted">@pilot.Aircraft.Type</small>
                                                </div>
                                                <span class="badge bg-success">
                                                    <i class="bi bi-broadcast"></i> LIVE
                                                </span>
                                            </div>
                                            
                                            @if (pilot.CurrentLatitude.HasValue && pilot.CurrentLongitude.HasValue)
                                            {
                                                <div class="row text-center mb-2">
                                                    <div class="col-4">
                                                        <small class="text-muted d-block">Alt</small>
                                                        <strong>@(pilot.CurrentAltitude?.ToString("F0") ?? "N/A") ft</strong>
                                                    </div>
                                                    <div class="col-4">
                                                        <small class="text-muted d-block">Hdg</small>
                                                        <strong>@(pilot.CurrentHeading?.ToString("F0") ?? "N/A")Â°</strong>
                                                    </div>
                                                    <div class="col-4">
                                                        <small class="text-muted d-block">Spd</small>
                                                        <strong>@(pilot.CurrentSpeed?.ToString("F0") ?? "N/A") kts</strong>
                                                    </div>
                                                </div>
                                            }
                                            
                                            <div class="d-flex justify-content-between align-items-center">
                                                <span class="badge bg-info">@pilot.CurrentPhase</span>
                                                @if (!string.IsNullOrEmpty(pilot.AssignedFrequency))
                                                {
                                                    <code class="small">@pilot.AssignedFrequency</code>
                                                }
                                            </div>
                                            
                                            <div class="d-grid gap-1 mt-2">
                                                <button class="btn btn-sm btn-outline-danger" @onclick="() => EndLiveSession(pilot.Id)">
                                                    <i class="bi bi-stop-fill me-1"></i>End Live Session
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        }
        
        <!-- All Pilots Section -->
        <div class="col-12">
            <div class="row">
                @foreach (var pilot in pilotProfiles.Where(p => !p.IsLive))
                {
                    <div class="col-md-6 col-lg-4 mb-3">
                        <div class="card">
                            <div class="card-body">
                                <div class="d-flex justify-content-between align-items-start mb-2">
                                    <div>
                                        <h6 class="mb-1 fw-bold">@pilot.Callsign</h6>
                                        <small class="text-muted">@pilot.Aircraft.Type</small>
                                    </div>
                                    @if (pilot.Aircraft.SupportsSimConnect)
                                    {
                                        <span class="badge bg-success">
                                            <i class="bi bi-plugin"></i> MSFS
                                        </span>
                                    }
                                </div>
                                
                                @if (!string.IsNullOrEmpty(pilot.PilotName))
                                {
                                    <p class="mb-1"><strong>Pilot:</strong> @pilot.PilotName</p>
                                }
                                
                                @if (!string.IsNullOrEmpty(pilot.ExperienceLevel))
                                {
                                    <p class="mb-1"><strong>Experience:</strong> @pilot.ExperienceLevel</p>
                                }
                                
                                @if (!string.IsNullOrEmpty(pilot.CertificatesRatings))
                                {
                                    <p class="mb-2"><strong>Ratings:</strong> @pilot.CertificatesRatings</p>
                                }
                                
                                <div class="d-grid gap-1">
                                    @if (pilot.Aircraft.SupportsSimConnect && simConnectStatus?.IsConnected == true)
                                    {
                                        <button class="btn btn-sm btn-success" @onclick="() => StartLiveSession(pilot.Id)">
                                            <i class="bi bi-broadcast me-1"></i>Start Live Session
                                        </button>
                                    }
                                    <div class="btn-group" role="group">
                                        <button class="btn btn-sm btn-outline-primary" @onclick="() => EditPilot(pilot)">
                                            <i class="bi bi-pencil"></i>
                                        </button>
                                        <button class="btn btn-sm btn-outline-danger" @onclick="() => DeletePilot(pilot.Id)">
                                            <i class="bi bi-trash"></i>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
}

<!-- Create/Edit Pilot Modal -->
<div class="modal fade" id="pilotModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@(editingPilot?.Id > 0 ? "Edit" : "Create") Pilot Profile</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            @if (editingPilot != null)
            {
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="callsign" class="form-label">Callsign *</label>
                        <input type="text" class="form-control" id="callsign" @bind="editingPilot.Callsign" placeholder="VH-ABC" required>
                    </div>
                    
                    <div class="mb-3">
                        <label for="aircraft" class="form-label">Aircraft *</label>
                        <select class="form-select" @bind="editingPilot.AircraftId" required>
                            <option value="">Select Aircraft</option>
                            @foreach (var aircraft in availableAircraft)
                            {
                                <option value="@aircraft.Id">@aircraft.Type - @aircraft.Manufacturer</option>
                            }
                        </select>
                    </div>
                    
                    <div class="mb-3">
                        <label for="pilotName" class="form-label">Pilot Name</label>
                        <input type="text" class="form-control" id="pilotName" @bind="editingPilot.PilotName" placeholder="John Smith">
                    </div>
                    
                    <div class="mb-3">
                        <label for="experience" class="form-label">Experience Level</label>
                        <select class="form-select" @bind="editingPilot.ExperienceLevel">
                            <option value="">Select Experience</option>
                            <option value="Student">Student</option>
                            <option value="Private">Private</option>
                            <option value="Commercial">Commercial</option>
                            <option value="ATP">ATP</option>
                        </select>
                    </div>
                    
                    <div class="mb-3">
                        <label for="certificates" class="form-label">Certificates & Ratings</label>
                        <input type="text" class="form-control" id="certificates" @bind="editingPilot.CertificatesRatings" placeholder="PPL, IR, Multi-Engine">
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="SavePilot">
                        @(editingPilot.Id > 0 ? "Update" : "Create")
                    </button>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private List<PilotProfile> pilotProfiles = new();
    private List<PilotProfile> livePilots = new();
    private List<Aircraft> availableAircraft = new();
    private SimConnectStatus? simConnectStatus;
    private bool isLoading = true;
    private PilotProfile? editingPilot;
    private HubConnection? hubConnection;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
        await SetupSignalR();
        
        // Refresh SimConnect status every 10 seconds
        var timer = new Timer(async _ => await RefreshSimConnectStatus(), null, TimeSpan.Zero, TimeSpan.FromSeconds(10));
    }

    private async Task LoadData()
    {
        try
        {
            isLoading = true;
            StateHasChanged();
            
            var pilotsTask = Http.GetFromJsonAsync<List<PilotProfile>>("/api/pilotprofile");
            var liveTask = Http.GetFromJsonAsync<List<PilotProfile>>("/api/pilotprofile/live");
            var aircraftTask = DbContext.Aircraft.OrderBy(a => a.Type).ToListAsync();
            var statusTask = Http.GetFromJsonAsync<SimConnectStatus>("/api/pilotprofile/simconnect/status");

            await Task.WhenAll(pilotsTask, liveTask, aircraftTask, statusTask);
            
            pilotProfiles = pilotsTask.Result ?? new();
            livePilots = liveTask.Result ?? new();
            availableAircraft = aircraftTask.Result;
            simConnectStatus = statusTask.Result;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading pilot profiles data");
            pilotProfiles = new();
            livePilots = new();
            availableAircraft = new();
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task RefreshData()
    {
        await LoadData();
    }

    private async Task RefreshSimConnectStatus()
    {
        try
        {
            simConnectStatus = await Http.GetFromJsonAsync<SimConnectStatus>("/api/pilotprofile/simconnect/status");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error refreshing SimConnect status");
        }
    }

    private async Task SetupSignalR()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl("/hubs/live")
            .Build();

        hubConnection.On<int>("pilotLiveSessionStarted", async (pilotId) =>
        {
            await LoadData();
        });

        hubConnection.On<int>("pilotLiveSessionEnded", async (pilotId) =>
        {
            await LoadData();
        });

        try
        {
            await hubConnection.StartAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error starting SignalR connection");
        }
    }

    private void ShowCreateModal()
    {
        editingPilot = new PilotProfile { Callsign = "", AircraftId = 0 };
        JSRuntime.InvokeVoidAsync("showModal", "pilotModal");
    }

    private void EditPilot(PilotProfile pilot)
    {
        editingPilot = new PilotProfile
        {
            Id = pilot.Id,
            Callsign = pilot.Callsign,
            AircraftId = pilot.AircraftId,
            PilotName = pilot.PilotName,
            ExperienceLevel = pilot.ExperienceLevel,
            CertificatesRatings = pilot.CertificatesRatings
        };
        JSRuntime.InvokeVoidAsync("showModal", "pilotModal");
    }

    private async Task SavePilot()
    {
        if (editingPilot == null) return;

        try
        {
            if (editingPilot.Id > 0)
            {
                // Update existing pilot
                var response = await Http.PutAsJsonAsync($"/api/pilotprofile/{editingPilot.Id}", new
                {
                    Callsign = editingPilot.Callsign,
                    AircraftId = editingPilot.AircraftId,
                    PilotName = editingPilot.PilotName,
                    ExperienceLevel = editingPilot.ExperienceLevel,
                    PreferredAirports = editingPilot.PreferredAirports,
                    CertificatesRatings = editingPilot.CertificatesRatings
                });
                response.EnsureSuccessStatusCode();
            }
            else
            {
                // Create new pilot
                var response = await Http.PostAsJsonAsync("/api/pilotprofile", new
                {
                    Callsign = editingPilot.Callsign,
                    AircraftId = editingPilot.AircraftId,
                    PilotName = editingPilot.PilotName,
                    ExperienceLevel = editingPilot.ExperienceLevel,
                    PreferredAirports = editingPilot.PreferredAirports,
                    CertificatesRatings = editingPilot.CertificatesRatings
                });
                response.EnsureSuccessStatusCode();
            }

            await JSRuntime.InvokeVoidAsync("hideModal", "pilotModal");
            await LoadData();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error saving pilot profile");
        }
    }

    private async Task DeletePilot(int pilotId)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this pilot profile?"))
        {
            try
            {
                var response = await Http.DeleteAsync($"/api/pilotprofile/{pilotId}");
                response.EnsureSuccessStatusCode();
                await LoadData();
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Error deleting pilot profile");
            }
        }
    }

    private async Task StartLiveSession(int pilotId)
    {
        try
        {
            var response = await Http.PostAsJsonAsync($"/api/pilotprofile/{pilotId}/start-live", new { });
            response.EnsureSuccessStatusCode();
            await LoadData();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error starting live session");
        }
    }

    private async Task EndLiveSession(int pilotId)
    {
        try
        {
            var response = await Http.PostAsync($"/api/pilotprofile/{pilotId}/end-live", null);
            response.EnsureSuccessStatusCode();
            await LoadData();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error ending live session");
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}