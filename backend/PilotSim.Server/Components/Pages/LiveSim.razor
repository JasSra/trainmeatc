@page "/simulation/{scenarioId:int}"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Components
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.SignalR.Client
@using PilotSim.Data
@using PilotSim.Data.Models
@using PilotSim.Core
@using System.Net.Http.Json
@using System.Text.Json
@using System.Linq
@using System.Collections.Generic
@using Microsoft.JSInterop
@inject NavigationManager Navigation
@inject SimDbContext DbContext
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<PageTitle>Live Simulation - TrainMeATC</PageTitle>

<div class="container-fluid vh-100 p-0">
    @if (scenario == null)
    {
        <div class="d-flex justify-content-center align-items-center h-100">
            <div class="text-center">
                <div class="spinner-border" role="status"><span class="visually-hidden">Loading...</span></div>
                <p>Loading scenario...</p>
            </div>
        </div>
    }
    else if (currentSession == null)
    {
        <!-- Setup Screen -->
        <div class="container-fluid py-4">
            <div class="row justify-content-center">
                <div class="col-lg-10">
                    <div class="aviation-panel">
                        <div class="aviation-panel-header"><i class="bi bi-airplane-engines"></i>Training Session Setup</div>
                        <div class="row gy-4">
                            <div class="col-md-8">
                                <h3>@scenario.Name</h3>
                                <p class="text-muted mb-3">@(scenario.Kind ?? "Aviation communication training scenario")</p>
                                <div class="row mb-3">
                                    <div class="col-sm-6 mb-3">
                                        <h6 class="mb-1"><i class="bi bi-geo-alt me-1"></i>Airport</h6>
                                        <p class="mb-2"><strong>@scenario.AirportIcao</strong> @if (scenario.Airport != null){<span class="text-muted">- @scenario.Airport.Name</span>}</p>
                                        <h6 class="mb-1"><i class="bi bi-speedometer me-1"></i>Difficulty</h6>
                                        <span class="scenario-difficulty difficulty-@(scenario.Difficulty?.ToLower() ?? "basic")">@(scenario.Difficulty ?? "Basic")</span>
                                    </div>
                                    <div class="col-sm-6 mb-3">
                                        <h6 class="mb-1"><i class="bi bi-sliders me-1"></i>Scenario Profile</h6>
                                        <ul class="list-unstyled small mb-0">
                                            <li><strong>Flight Rules:</strong> @scenario.FlightRules</li>
                                            <li><strong>Pilot Type:</strong> @scenario.PilotType</li>
                                            <li><strong>Operation:</strong> @scenario.OperationType</li>
                                            @if (!string.IsNullOrWhiteSpace(scenario.WeatherConditions)) {<li><strong>Weather:</strong> @scenario.WeatherConditions</li>}
                                            @if (!string.IsNullOrWhiteSpace(scenario.TrafficDensity)) {<li><strong>Traffic:</strong> @scenario.TrafficDensity</li>}
                                            @if (!string.IsNullOrWhiteSpace(scenario.PrimaryFrequency)) {<li><strong>Primary Freq:</strong> @scenario.PrimaryFrequency</li>}
                                        </ul>
                                    </div>
                                </div>
                                <div class="mb-3">
                                    <h6 class="mb-1"><i class="bi bi-building me-1"></i>Airport Details</h6>
                                    @if (scenario.Airport != null)
                                    {
                                        <div class="small mb-2">
                                            <strong>Frequencies:</strong>
                                            @if(!string.IsNullOrEmpty(scenario.Airport.TowerFreq)){<span class="badge bg-secondary me-1" title="Tower">@scenario.Airport.TowerFreq</span>}
                                            @if(!string.IsNullOrEmpty(scenario.Airport.GroundFreq)){<span class="badge bg-secondary me-1" title="Ground">@scenario.Airport.GroundFreq</span>}
                                            @if(!string.IsNullOrEmpty(scenario.Airport.AtisFreq)){<span class="badge bg-secondary me-1" title="ATIS">@scenario.Airport.AtisFreq</span>}
                                            @if(!string.IsNullOrEmpty(scenario.Airport.AppFreq)){<span class="badge bg-secondary me-1" title="Approach">@scenario.Airport.AppFreq</span>}
                                        </div>
                                        @if (scenario.Airport.Runways?.Any() == true)
                                        {
                                            <div class="small"><strong>Runways:</strong> @string.Join(", ", scenario.Airport.Runways.Take(6).Select(r => r.Ident)) @if (scenario.Airport.Runways.Count > 6){<span class="text-muted">(+@((scenario.Airport.Runways.Count)-6))</span>}</div>
                                        }
                                    }
                                    else { <div class="small text-muted">No airport metadata loaded.</div> }
                                </div>
                                @if (learningObjectives.Any())
                                {
                                    <div class="mb-3 small">
                                        <h6 class="mb-1"><i class="bi bi-bullseye me-1"></i>Learning Objectives</h6>
                                        <ul class="mb-0 ps-3">@foreach (var lo in learningObjectives.Take(5)) { <li>@lo</li> }</ul>
                                    </div>
                                }
                                <div class="alert alert-info mb-0">
                                    <i class="bi bi-info-circle me-2"></i>
                                    <strong>Instructions:</strong> Use professional phraseology. Press and hold the mic while speaking. Acknowledge all ATC communications.
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <h6 class="mb-2"><i class="bi bi-airplane me-1"></i>Aircraft</h6>
                                    @if (pilotProfile?.Aircraft != null)
                                    {
                                        <div class="small">
                                            <strong>@pilotProfile.Aircraft.Type</strong> (@pilotProfile.Aircraft.Category)<br />
                                            <span class="text-muted">@pilotProfile.Aircraft.Manufacturer</span><br />
                                            <span class="text-muted">Wake: @pilotProfile.Aircraft.WakeCategory</span>
                                        </div>
                                    }
                                    else { <div class="small text-muted">No active aircraft profile.</div> }
                                </div>
                                <div class="mb-3">
                                    <h6 class="mb-2"><i class="bi bi-crosshair me-1"></i>Current Position</h6>
                                    @if (pilotProfile?.IsLive == true)
                                    {
                                        <div class="small">
                                            Lat: @pilotProfile.CurrentLatitude?.ToString("F4")<br />
                                            Lon: @pilotProfile.CurrentLongitude?.ToString("F4")<br />
                                            Alt: @pilotProfile.CurrentAltitude?.ToString("F0") ft<br />
                                            Phase: @pilotProfile.CurrentPhase
                                        </div>
                                    }
                                    else { <div class="small text-muted">No live position data.</div> }
                                </div>
                                <div class="mb-3">
                                    <h6 class="mb-2"><i class="bi bi-headphones me-1"></i>Audio Check</h6>
                                    <div class="d-flex gap-2 flex-wrap">
                                        <button class="btn btn-outline-primary btn-sm" @onclick="TestMicrophone" disabled="@microphoneTestInProgress">
                                            @if (microphoneTestInProgress){<span class="spinner-border spinner-border-sm me-1" role="status"></span>}
                                            <i class="bi bi-mic-fill me-1"></i>@(microphoneTestInProgress ? "Checking..." : "Test Mic")
                                        </button>
                                        <button class="btn btn-outline-primary btn-sm" @onclick="TestSpeakers" disabled="@speakerTestInProgress">
                                            @if (speakerTestInProgress){<span class="spinner-border spinner-border-sm me-1" role="status"></span>}
                                            <i class="bi bi-volume-up-fill me-1"></i>@(speakerTestInProgress ? "Playing..." : "Test Spk")
                                        </button>
                                    </div>
                                    <div class="mt-2 small">
                                        @if (microphoneTestResult != null)
                                        {<div class="mb-1"><span class="badge rounded-pill @(microphoneTestResult.Value ? "bg-success-subtle text-success" : "bg-danger-subtle text-danger")"><i class="bi bi-@(microphoneTestResult.Value ? "mic-fill" : "mic-mute") me-1"></i>@(microphoneTestResult.Value ? "Mic OK" : "Mic Error")</span></div>}
                                        @if (!string.IsNullOrEmpty(microphoneTestMessage)){<div class="text-muted">@microphoneTestMessage</div>}
                                        @if (speakerTestRan){<div class="mb-1"><span class="badge rounded-pill @(speakerTestSuccess ? "bg-info-subtle text-info" : "bg-danger-subtle text-danger")"><i class="bi bi-@(speakerTestSuccess ? "volume-up" : "exclamation-triangle") me-1"></i>@(speakerTestSuccess ? "Tone Played" : "Speaker Error")</span></div>}
                                        @if (!string.IsNullOrEmpty(speakerTestMessage)){<div class="text-muted">@speakerTestMessage</div>}
                                    </div>
                                </div>
                                <div class="d-grid gap-2">
                                    <button class="btn btn-aviation-primary" @onclick="StartSession" disabled="@isStartingSession">
                                        @if (isStartingSession)
                                        {
                                            <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                            <span>Preparing...</span>
                                        }
                                        else
                                        {
                                            <span><i class="bi bi-play-fill me-2"></i>Start Session</span>
                                        }
                                    </button>
                                    <button class="btn btn-outline-secondary" @onclick="GoBack"><i class="bi bi-arrow-left me-2"></i>Back</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
    else
    {
        <!-- Live Session Interface -->
        <div class="container-fluid py-3">
            <div class="row g-3">
                <div class="col-12">
                    <div class="aviation-panel">
                        <div class="aviation-panel-header"><i class="bi bi-broadcast"></i>Live Training Session - @scenario.Name</div>
                        <div class="row align-items-center">
                            <div class="col-md-8 d-flex flex-wrap gap-3 align-items-center">
                                <div class="session-status @(isRecording ? "recording" : "active")"><i class="bi bi-@(isRecording ? "mic-fill" : "radio") me-1"></i>@(isRecording ? "Recording" : "Active")</div>
                                <small class="text-muted">@scenario.AirportIcao • Session @currentSession.Id</small>
                                <small class="text-muted">FR: @scenario.FlightRules | WX: @(scenario.WeatherConditions ?? "N/A") | Traffic: @(scenario.TrafficDensity ?? "N/A")</small>
                                @if (pilotProfile?.IsLive == true)
                                {<small class="text-muted">Pos: @pilotProfile.CurrentLatitude?.ToString("F3"), @pilotProfile.CurrentLongitude?.ToString("F3") Alt @pilotProfile.CurrentAltitude?.ToString("F0")ft</small>}
                            </div>
                            <div class="col-md-4 text-end">
                                <div class="score-display">
                                    <span class="score-value">@totalScore</span>
                                    <span class="score-label">Score</span>
                                    @if (scoreDelta != 0)
                                    {<div class="score-delta @(scoreDelta > 0 ? "positive" : "negative")">@(scoreDelta > 0 ? "+" : "")@scoreDelta</div>}
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Guidance Cards Row -->
                <div class="col-12">
                    <div class="row g-3">
                        <div class="col-md-4">
                            <div class="card h-100 shadow-sm">
                                <div class="card-header py-2"><i class="bi bi-bullseye me-1"></i>Lesson Focus</div>
                                <div class="card-body small">
                                    <strong>@(scenario.Kind ?? scenario.OperationType ?? "Training")</strong>
                                    <p class="mb-2">@GetLessonSummary()</p>
                                    @if (learningObjectives.Any())
                                    {
                                        <ul class="mb-0 ps-3">
                                            @foreach (var lo in learningObjectives.Take(3)) { <li>@lo</li> }
                                        </ul>
                                    }
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="card h-100 shadow-sm">
                                <div class="card-header py-2"><i class="bi bi-crosshair me-1"></i>Current Situation</div>
                                <div class="card-body small">
                                    <div><strong>Airport:</strong> @scenario.AirportIcao @if (scenario.Airport != null){<span class="text-muted">- @scenario.Airport.Name</span>}</div>
                                    <div><strong>Diff:</strong> @(scenario.Difficulty ?? "Basic")</div>
                                    <div><strong>WX:</strong> @(scenario.WeatherConditions ?? "N/A")</div>
                                    <div><strong>Traffic:</strong> @(scenario.TrafficDensity ?? "N/A")</div>
                                    @if (pilotProfile?.IsLive == true)
                                    {
                                        <div class="mt-2"><strong>Position:</strong><br />Lat @pilotProfile.CurrentLatitude?.ToString("F3"), Lon @pilotProfile.CurrentLongitude?.ToString("F3")<br />Alt @pilotProfile.CurrentAltitude?.ToString("F0")ft Phase @pilotProfile.CurrentPhase</div>
                                    }
                                    else
                                    {
                                        <div class="mt-2 text-muted">No live position feed.</div>
                                    }
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="card h-100 shadow-sm">
                                <div class="card-header py-2"><i class="bi bi-lightning-charge me-1"></i>Next Action</div>
                                <div class="card-body small">
                                    @if (isWorkbookScenario && currentPhase != null)
                                    {
                                        <div class="mb-2">
                                            <strong class="text-primary">Phase:</strong> @currentPhase.Id
                                            @if (!string.IsNullOrEmpty(currentPhase.Name))
                                            {
                                                <div class="text-muted small">@currentPhase.Name</div>
                                            }
                                        </div>
                                        @if (currentPhase.RequiredComponents?.Any() == true)
                                        {
                                            <div class="mb-2">
                                                <small class="text-muted">Required elements:</small>
                                                <ul class="small ps-3 mb-0">
                                                    @foreach (var req in currentPhase.RequiredComponents.Take(3))
                                                    {
                                                        <li>@req</li>
                                                    }
                                                </ul>
                                            </div>
                                        }
                                    }
                                    @if (isRecording)
                                    {
                                        <div class="text-danger"><i class="bi bi-mic-fill me-1"></i>Transmit clearly...</div>
                                    }
                                    else if (isProcessingTurn)
                                    {
                                        <div class="d-flex align-items-center"><div class="spinner-border spinner-border-sm me-2" role="status"></div>Evaluating your last transmission...</div>
                                    }
                                    else if (isBlocked && !string.IsNullOrEmpty(blockReason))
                                    {
                                        <div class="text-warning"><i class="bi bi-exclamation-triangle me-1"></i>@blockReason</div>
                                        <button class="btn btn-outline-secondary btn-sm mt-2" @onclick="ClearBlock"><i class="bi bi-arrow-clockwise me-1"></i>Retry</button>
                                    }
                                    else if (lastExpectedReadbacks?.Any() == true)
                                    {
                                        <div class="mb-1"><strong>Expected Readback:</strong></div>
                                        <ul class="ps-3 mb-2">
                                            @foreach (var rb in lastExpectedReadbacks.Take(3)) { <li>@rb</li> }
                                        </ul>
                                        <div class="text-muted">Match required elements & callsign.</div>
                                    }
                                    else if (latestVerdict?.Improvements?.Any() == true)
                                    {
                                        <div class="mb-1"><strong>Improve:</strong></div>
                                        <ul class="ps-3 mb-0">
                                            @foreach (var imp in latestVerdict.Improvements.Take(3)) { <li>@imp</li> }
                                        </ul>
                                    }
                                    else
                                    {
                                        <div>@GetInitialPrompt()</div>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="col-md-6">
                    <div class="aviation-panel">
                        <div class="aviation-panel-header"><i class="bi bi-mic"></i>Radio Communication</div>
                        <div class="text-center mb-4">
                            <button class="btn push-to-talk @(isRecording ? "recording" : "btn-aviation-primary") btn-lg"
                                    @onmousedown="StartRecording" @onmouseup="StopRecording"
                                    @ontouchstart="StartRecording" @ontouchend="StopRecording"
                                    disabled="@(isBlocked || isProcessingTurn)">
                                <i class="bi bi-@(isRecording ? "mic-fill" : "mic") me-2"></i>
                                @(isRecording ? "TRANSMITTING" : (isBlocked ? "BLOCKED" : (isProcessingTurn ? "PROCESSING..." : "PUSH TO TALK")))
                            </button>
                        </div>
                        <div class="audio-level-meter"><div class="audio-level-bar" style="width: @(audioLevel * 100)%"></div></div>
                        <small class="text-muted">Audio Level: @((int)(audioLevel * 100))%</small>
                        @if (isBlocked && !string.IsNullOrEmpty(blockReason))
                        {
                            <div class="retry-banner mt-3">
                                <div class="retry-message"><i class="bi bi-exclamation-triangle"></i><span class="ms-2">@blockReason</span></div>
                                <div class="retry-actions"><button class="btn btn-sm btn-outline-light" @onclick="ClearBlock"><i class="bi bi-arrow-clockwise me-1"></i>Retry</button></div>
                            </div>
                        }
                        @if (isProcessingTurn && !isRecording)
                        {
                            <div class="mt-3 text-center small text-info"><div class="spinner-border spinner-border-sm me-2" role="status"></div>Processing turn - stand by...</div>
                        }
                    </div>
                    <div class="aviation-panel">
                        <div class="aviation-panel-header"><i class="bi bi-chat-dots"></i>Live Transcript</div>
                        <div class="transcript-container">
                            @if (!string.IsNullOrEmpty(currentTranscript))
                            {<div class="@(isPartialTranscript ? "transcript-partial" : "transcript-final")">@currentTranscript</div>}
                            else { <div class="text-muted">Your communications will appear here...</div> }
                        </div>
                        @if (isPartialTranscript){<small class="text-info"><i class="bi bi-typing me-1"></i>Processing speech...</small>}
                    </div>
                </div>

                <div class="col-md-6">
                    <div class="aviation-panel">
                        <div class="aviation-panel-header"><i class="bi bi-tower"></i>Air Traffic Control</div>
                        @if (!string.IsNullOrEmpty(lastAtcTransmission))
                        {
                            <div class="atc-transmission p-3 mb-3">
                                <div class="d-flex justify-content-between align-items-start mb-2">
                                    <strong class="text-aviation-primary">Melbourne Tower:</strong>
                                    <button class="btn btn-sm btn-outline-secondary" @onclick="PlayAtcAudio"><i class="bi bi-volume-up"></i></button>
                                </div>
                                <p class="mb-0">@lastAtcTransmission</p>
                            </div>
                        }
                        else { <div class="text-muted p-3"><i class="bi bi-headphones me-2"></i>Listening for ATC communications...</div> }
                    </div>
                    <div class="aviation-panel">
                        <div class="aviation-panel-header"><i class="bi bi-clipboard-check"></i>Instructor Feedback</div>
                        @if (latestVerdict != null)
                        {
                            <div class="p-3">
                                @if (!string.IsNullOrEmpty(latestVerdict.BlockReason))
                                {<div class="alert alert-warning py-2"><i class="bi bi-shield-exclamation me-2"></i>@latestVerdict.BlockReason</div>}
                                @if (latestVerdict.Critical?.Any() == true)
                                {
                                    <div class="mb-3"><h6 class="text-danger">Critical Issues</h6><ul class="list-unstyled mb-0">@foreach (var item in latestVerdict.Critical){<li><i class="bi bi-x-octagon me-1 text-danger"></i>@item</li>}</ul></div>
                                }
                                @if (latestVerdict.Improvements?.Any() == true)
                                {
                                    <div class="mb-3"><h6 class="text-info">Suggested Improvements</h6><ul class="list-unstyled mb-0">@foreach (var item in latestVerdict.Improvements){<li><i class="bi bi-lightbulb me-1 text-info"></i>@item</li>}</ul></div>
                                }
                                @if (!string.IsNullOrEmpty(latestVerdict.ExemplarReadback))
                                {<div><h6 class="text-success">Exemplar Readback</h6><p class="mb-0">@latestVerdict.ExemplarReadback</p></div>}
                                <div class="mt-3 text-muted small">Score impact: <strong>@(latestVerdict.ScoreDelta >= 0 ? $"+{latestVerdict.ScoreDelta}" : latestVerdict.ScoreDelta.ToString())</strong></div>
                                @if (showBreakdown && latestVerdict.Components?.Any() == true)
                                {
                                    <div class="mt-3">
                                        <h6 class="text-secondary mb-2">Component Breakdown <small class="text-muted">(Rubric @latestVerdict.RubricVersion)</small></h6>
                                        <div class="table-responsive small">
                                            <table class="table table-sm table-striped mb-0 align-middle">
                                                <thead><tr><th>Code</th><th>Cat</th><th>Sev</th><th>Wgt</th><th>Score</th><th>Δ</th><th>Detail</th></tr></thead>
                                                <tbody>
                                                @foreach (var c in latestVerdict.Components.OrderByDescending(c => c.Delta))
                                                {
                                                    var sevClass = c.Severity switch { "critical" => "text-danger fw-bold", "major" => "text-danger", "minor" => "text-warning", _ => "text-muted" };
                                                    <tr>
                                                        <td>@c.Code</td><td>@c.Category[..Math.Min(3, c.Category.Length)]</td>
                                                        <td class="@sevClass">@c.Severity</td>
                                                        <td>@c.Weight?.ToString("0.##")</td>
                                                        <td>@c.Score?.ToString("0.00")</td>
                                                        <td class="@(c.Delta >= 0 ? "text-success" : "text-danger")">@((c.Delta >= 0 ? "+" : "") + c.Delta?.ToString("0.##"))</td>
                                                        <td style="max-width:180px">@c.Detail</td>
                                                    </tr>
                                                }
                                                </tbody>
                                            </table>
                                        </div>
                                        <div class="row g-2 mt-2 small">
                                            @if (latestVerdict.PhraseAccuracy.HasValue){<div class="col"><strong>Phrase:</strong> @latestVerdict.PhraseAccuracy.Value.ToString("0.00")</div>}
                                            @if (latestVerdict.Ordering.HasValue){<div class="col"><strong>Order:</strong> @latestVerdict.Ordering.Value.ToString("0.00")</div>}
                                            @if (latestVerdict.Omissions.HasValue){<div class="col"><strong>Omit:</strong> @latestVerdict.Omissions.Value.ToString("0.00")</div>}
                                            @if (latestVerdict.Safety.HasValue){<div class="col"><strong>Safety:</strong> @latestVerdict.Safety.Value.ToString("0.00")</div>}
                                            @if (latestVerdict.SafetyFlag == true){<div class="col text-danger"><i class="bi bi-exclamation-octagon"></i> Safety Flag</div>}
                                        </div>
                                    </div>
                                }
                                <div class="mt-2"><button class="btn btn-outline-secondary btn-sm" @onclick="ToggleBreakdown"><i class="bi bi-diagram-3 me-1"></i>@(showBreakdown ? "Hide" : "Show") Breakdown</button></div>
                            </div>
                        }
                        else { <div class="text-muted p-3"><i class="bi bi-flag me-2"></i>Awaiting your first transmission...</div> }
                    </div>
                    <div class="aviation-panel"><div class="aviation-panel-header"><i class="bi bi-list-check"></i>Session Progress</div>
                        @if (completedTurns.Any())
                        {
                            <div class="timeline">
                                @foreach (var turn in completedTurns.TakeLast(5))
                                {
                                    <div class="timeline-item">
                                        <div class="timeline-marker"><i class="bi bi-check"></i></div>
                                        <div class="timeline-content"><small class="text-muted">Turn @turn.Idx</small><p class="mb-1">@turn.UserTranscript</p><small class="text-success">Completed</small></div>
                                    </div>
                                }
                            </div>
                        }
                        else { <div class="text-muted p-3"><i class="bi bi-clock me-2"></i>Session starting...</div> }
                    </div>
                    <div class="aviation-panel">
                        <div class="aviation-panel-header"><i class="bi bi-gear"></i>Session Controls</div>
                        <div class="d-grid gap-2">
                            <button class="btn btn-aviation-danger" @onclick="EndSession"><i class="bi bi-stop-fill me-2"></i>End Session</button>
                            <small class="text-muted text-center">Use this to end your training session and view your debrief.</small>
                        </div>
                    </div>
                    
                    @if (isWorkbookScenario && workbook != null)
                    {
                        <div class="aviation-panel">
                            <div class="aviation-panel-header">
                                <i class="bi bi-book me-1"></i>Scenario Workbook
                                <button class="btn btn-sm btn-outline-secondary ms-auto" @onclick="@(() => showWorkbookPanel = !showWorkbookPanel)">
                                    <i class="bi bi-@(showWorkbookPanel ? "chevron-up" : "chevron-down")"></i>
                                </button>
                            </div>
                            @if (showWorkbookPanel)
                            {
                                <div class="p-3 small">
                                    <div class="mb-2">
                                        <strong>Scenario ID:</strong> @workbook.Meta?.Id
                                        <span class="ms-2 text-muted">v@(workbook.Meta?.Version ?? "2.0")</span>
                                    </div>
                                    
                                    <div class="mb-3">
                                        <strong>Phases (@workbook.Phases.Count):</strong>
                                        <div class="mt-2">
                                            @foreach (var phase in workbook.Phases)
                                            {
                                                <div class="@(phase.Id == currentPhaseId ? "badge bg-primary" : "badge bg-secondary") me-1 mb-1">
                                                    @phase.Id
                                                    @if (phase.Id == currentPhaseId)
                                                    {
                                                        <i class="bi bi-check-circle ms-1"></i>
                                                    }
                                                </div>
                                            }
                                        </div>
                                    </div>
                                    
                                    @if (currentPhase != null)
                                    {
                                        <div class="mb-2">
                                            <strong>Current Phase Details:</strong>
                                            <div class="mt-1 ps-2">
                                                <div><strong>ID:</strong> @currentPhase.Id</div>
                                                @if (!string.IsNullOrEmpty(currentPhase.Name))
                                                {
                                                    <div><strong>Name:</strong> @currentPhase.Name</div>
                                                }
                                                @if (currentPhase.PrimaryFreqMhz > 0)
                                                {
                                                    <div><strong>Freq:</strong> @currentPhase.PrimaryFreqMhz MHz</div>
                                                }
                                                @if (currentPhase.RequiredComponents?.Any() == true)
                                                {
                                                    <div><strong>Required:</strong> @string.Join(", ", currentPhase.RequiredComponents)</div>
                                                }
                                                @if (currentPhase.Branches?.Any() == true)
                                                {
                                                    <div><strong>Branches:</strong> @currentPhase.Branches.Count available</div>
                                                }
                                            </div>
                                        </div>
                                    }
                                    
                                    @if (workbook.ContextResolved?.Airport != null)
                                    {
                                        <div class="mb-2">
                                            <strong>Airport Context:</strong>
                                            <div class="mt-1 ps-2">
                                                <div>@workbook.ContextResolved.Airport.Icao - @workbook.ContextResolved.Airport.Name</div>
                                                <div><strong>Tower:</strong> @(workbook.ContextResolved.Airport.TowerActive ? "Active" : "Inactive")</div>
                                                @if (!string.IsNullOrEmpty(workbook.ContextResolved.RunwayInUse))
                                                {
                                                    <div><strong>Runway:</strong> @workbook.ContextResolved.RunwayInUse</div>
                                                }
                                            </div>
                                        </div>
                                    }
                                    
                                    @if (workbook.ContextResolved?.TrafficSnapshot != null)
                                    {
                                        <div class="mb-2">
                                            <strong>Traffic:</strong>
                                            <div class="mt-1 ps-2">
                                                <div><strong>Density:</strong> @workbook.ContextResolved.TrafficSnapshot.Density</div>
                                                <div><strong>Aircraft:</strong> @workbook.ContextResolved.TrafficSnapshot.Actors.Count</div>
                                                @if (workbook.ContextResolved.TrafficSnapshot.Conflicts?.Any() == true)
                                                {
                                                    <div class="text-warning"><strong>Conflicts:</strong> @workbook.ContextResolved.TrafficSnapshot.Conflicts.Count</div>
                                                }
                                            </div>
                                        </div>
                                    }
                                </div>
                            }
                        </div>
                    }
                </div>
            </div>
        </div>
    }
</div>

<audio id="tts-audio" preload="none"></audio>

@code {
    [Parameter] public int ScenarioId { get; set; }
    private Scenario? scenario;
    private Session? currentSession;
    private List<Turn> completedTurns = new();
    private PilotProfile? pilotProfile;
    private List<string> learningObjectives = new();
    
    // ScenarioWorkbookV2 support
    private ScenarioWorkbookV2? workbook;
    private PhaseSpec? currentPhase;
    private string currentPhaseId = "initial";
    private bool isWorkbookScenario = false;

    private HubConnection? hubConnection;
    private bool isRecording; private bool isBlocked; private string? blockReason;
    private string currentTranscript = string.Empty; private bool isPartialTranscript;
    private string? lastAtcTransmission; private string? lastTtsAudioPath;
    private List<string>? lastExpectedReadbacks;
    private int totalScore; private int scoreDelta; private int pendingScoreDelta;
    private double audioLevel; private bool? microphoneTestResult; private bool microphoneTestInProgress;
    private bool speakerTestInProgress; private bool speakerTestRan; private bool speakerTestSuccess;
    private string? microphoneTestMessage; private string? speakerTestMessage;
    private InstructorVerdictDto? latestVerdict; private bool isProcessingTurn; private bool isStartingSession;
    private DotNetObjectReference<LiveSim>? dotNetRef; private bool showBreakdown;
    private bool showWorkbookPanel = false;

    protected override async Task OnInitializedAsync()
    {
        scenario = await DbContext.Scenarios.Include(s => s.Airport)!.ThenInclude(a => a!.Runways).FirstOrDefaultAsync(s => s.Id == ScenarioId);
        if (scenario == null){ Navigation.NavigateTo("/scenarios"); return; }
        
        // Load ScenarioWorkbookV2 if available
        if (!string.IsNullOrEmpty(scenario.InitialStateJson))
        {
            try
            {
                workbook = JsonSerializer.Deserialize<ScenarioWorkbookV2>(scenario.InitialStateJson);
                if (workbook?.Phases?.Any() == true)
                {
                    isWorkbookScenario = true;
                    currentPhase = workbook.Phases.First();
                    currentPhaseId = currentPhase.Id;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Failed to parse workbook: {ex.Message}");
            }
        }
        
        if (!string.IsNullOrWhiteSpace(scenario.LearningObjectives))
        {
            try { var arr = JsonDocument.Parse(scenario.LearningObjectives).RootElement; if (arr.ValueKind == JsonValueKind.Array) learningObjectives = arr.EnumerateArray().Select(e => e.GetString()).Where(s => !string.IsNullOrWhiteSpace(s))!.ToList(); } catch { }
        }
        pilotProfile = await DbContext.PilotProfiles.Include(p => p.Aircraft).OrderByDescending(p => p.IsLive).FirstOrDefaultAsync();
        hubConnection = new HubConnectionBuilder().WithUrl(Navigation.ToAbsoluteUri("/hubs/live")).Build();
        hubConnection.On<string, double?>("partialTranscript", (t, c) => { currentTranscript = t; isPartialTranscript = c < 0.8; InvokeAsync(StateHasChanged); });
        hubConnection.On<InstructorVerdictDto>("instructorVerdict", verdict => { latestVerdict = verdict; pendingScoreDelta = verdict?.ScoreDelta ?? 0; isPartialTranscript = false; if (!string.IsNullOrWhiteSpace(verdict?.BlockReason) && verdict?.Critical?.Any() == true){ blockReason = verdict.BlockReason; isBlocked = true; } else { blockReason = null; isBlocked = false; } InvokeAsync(StateHasChanged); });
        hubConnection.On<AtcReplyDto>("atcTransmission", async tx => { lastAtcTransmission = tx?.Transmission; lastExpectedReadbacks = tx?.ExpectedReadback; await InvokeAsync(StateHasChanged); if (!string.IsNullOrEmpty(lastTtsAudioPath)) await PlayAtcAudio(); });
        hubConnection.On<string>("ttsReady", async path => { lastTtsAudioPath = path; await InvokeAsync(StateHasChanged); await PlayAtcAudio(); });
        hubConnection.On<int>("scoreTick", newTotal => { var prev = totalScore; totalScore = newTotal; var computed = newTotal - prev; scoreDelta = computed != 0 ? computed : pendingScoreDelta; pendingScoreDelta = 0; InvokeAsync(StateHasChanged); if (scoreDelta != 0) Task.Delay(3000).ContinueWith(_ => { scoreDelta = 0; InvokeAsync(StateHasChanged); }); });
        await hubConnection.StartAsync();
    }

    private async Task StartSession()
    {
        if (scenario == null) return; isStartingSession = true; StateHasChanged();
        try
        {
            var response = await Http.PostAsJsonAsync("/api/session", new { ScenarioId = scenario.Id, Difficulty = scenario.Difficulty ?? "Basic" });
            if (response.IsSuccessStatusCode)
            {
                var sessionId = await response.Content.ReadFromJsonAsync<int>();
                currentSession = new Session { Id = sessionId, ScenarioId = scenario.Id, StartedUtc = DateTime.UtcNow.ToString("O"), Difficulty = scenario.Difficulty ?? "Basic" };
                if (hubConnection?.State == HubConnectionState.Connected) await hubConnection.InvokeAsync("JoinSession", sessionId.ToString());
                await SetupAudioCallbacks();
                ResetSessionState();
            }
            else { blockReason = $"Unable to start session ({response.StatusCode})."; isBlocked = true; }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error starting session: {ex.Message}");
            currentSession = new Session { Id = Random.Shared.Next(1000, 9999), ScenarioId = scenario.Id, StartedUtc = DateTime.UtcNow.ToString("O"), Difficulty = scenario.Difficulty ?? "Basic" };
            await SetupAudioCallbacks(); ResetSessionState();
        }
        finally { isStartingSession = false; StateHasChanged(); }
    }

    private void ResetSessionState()
    {
        completedTurns.Clear(); latestVerdict = null; lastAtcTransmission = null; lastExpectedReadbacks = null; currentTranscript = string.Empty; isPartialTranscript = false; isBlocked = false; blockReason = null; totalScore = 0; scoreDelta = 0; pendingScoreDelta = 0; isProcessingTurn = false; audioLevel = 0; lastTtsAudioPath = null;
    }

    private async Task StartRecording()
    { if (isBlocked || isProcessingTurn) return; isRecording = true; try { await JSRuntime.InvokeVoidAsync("startAudioCapture"); } catch (Exception ex) { Console.WriteLine($"Error starting recording: {ex.Message}"); } }

    private async Task StopRecording()
    { if (!isRecording) return; isRecording = false; isProcessingTurn = true; try { await JSRuntime.InvokeVoidAsync("stopAudioCapture"); } catch (Exception ex) { Console.WriteLine($"Error stopping recording: {ex.Message}"); isProcessingTurn = false; } }

    private void ClearBlock() { isBlocked = false; blockReason = null; isProcessingTurn = false; }

    private async Task PlayAtcAudio()
    { if (!string.IsNullOrEmpty(lastTtsAudioPath)) { try { await JSRuntime.InvokeVoidAsync("playAudio", "tts-audio", lastTtsAudioPath); } catch (Exception ex) { Console.WriteLine($"Error playing audio: {ex.Message}"); } } }

    private async Task EndSession()
    { if (currentSession != null) { try { await Http.PostAsJsonAsync($"/api/session/{currentSession.Id}/end", new { }); } catch (Exception ex) { Console.WriteLine($"Error ending session: {ex.Message}"); } } Navigation.NavigateTo($"/debrief/{currentSession?.Id}"); }

    private async Task TestMicrophone()
    { microphoneTestInProgress = true; microphoneTestMessage = null; microphoneTestResult = null; StateHasChanged(); try { var r = await JSRuntime.InvokeAsync<DeviceTestResult>("trainmeAudio.testMicrophone"); microphoneTestResult = r.Success; microphoneTestMessage = r.Message; } catch { microphoneTestResult = false; microphoneTestMessage = "Microphone test failed. Check permissions."; } finally { microphoneTestInProgress = false; StateHasChanged(); } }

    private async Task TestSpeakers()
    { speakerTestRan = true; speakerTestInProgress = true; speakerTestMessage = null; speakerTestSuccess = false; StateHasChanged(); try { var r = await JSRuntime.InvokeAsync<DeviceTestResult>("trainmeAudio.testSpeakers"); speakerTestSuccess = r.Success; speakerTestMessage = r.Message; } catch { speakerTestSuccess = false; speakerTestMessage = "Speaker playback failed."; } finally { speakerTestInProgress = false; StateHasChanged(); } }

    private async Task SetupAudioCallbacks()
    {
        if (currentSession != null) await JSRuntime.InvokeVoidAsync("liveSim.setSessionId", currentSession.Id);
        dotNetRef ??= DotNetObjectReference.Create(this);
        await JSRuntime.InvokeVoidAsync("liveSim.register", dotNetRef);
        await JSRuntime.InvokeVoidAsync("liveSim.initCallbacks");
    }

    [JSInvokable] public void UpdateAudioLevelInstance(double level) { audioLevel = level; InvokeAsync(StateHasChanged); }

    [JSInvokable] public async Task HandleTurnResultInstance(string json)
    {
        if (string.IsNullOrWhiteSpace(json)) return;
        try
        {
            var turnResult = JsonSerializer.Deserialize<TurnResultDto>(json, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
            if (turnResult == null) return;
            currentTranscript = turnResult.Transcript ?? string.Empty; isPartialTranscript = false;
            if (turnResult.Verdict != null)
            {
                latestVerdict = turnResult.Verdict; pendingScoreDelta = turnResult.Verdict.ScoreDelta; scoreDelta = pendingScoreDelta;
                if (!string.IsNullOrWhiteSpace(turnResult.Verdict.BlockReason) && turnResult.Verdict.Critical?.Any() == true){ blockReason = turnResult.Verdict.BlockReason; isBlocked = true; } else { blockReason = null; isBlocked = false; }
            }
            if (turnResult.AtcResponse != null) 
            { 
                lastAtcTransmission = turnResult.AtcResponse.Transmission; 
                lastExpectedReadbacks = turnResult.AtcResponse.ExpectedReadback; 
                
                // Update phase if workbook scenario and phase changed
                if (isWorkbookScenario && turnResult.AtcResponse.NextState != null && workbook != null)
                {
                    try
                    {
                        var nextStateJson = JsonSerializer.Serialize(turnResult.AtcResponse.NextState);
                        var nextState = JsonSerializer.Deserialize<JsonElement>(nextStateJson);
                        if (nextState.TryGetProperty("phase", out var phaseElement))
                        {
                            var newPhaseId = phaseElement.GetString();
                            if (!string.IsNullOrEmpty(newPhaseId) && newPhaseId != currentPhaseId)
                            {
                                currentPhaseId = newPhaseId;
                                currentPhase = workbook.Phases.FirstOrDefault(p => p.Id == newPhaseId);
                                Console.WriteLine($"Phase changed to: {currentPhaseId}");
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"Failed to update phase: {ex.Message}");
                    }
                }
            }
            if (!string.IsNullOrEmpty(turnResult.TtsAudioPath)) { lastTtsAudioPath = turnResult.TtsAudioPath; await PlayAtcAudio(); }
            isProcessingTurn = false;
            completedTurns.Add(new Turn { Idx = completedTurns.Count + 1, UserTranscript = currentTranscript });
            if (scoreDelta != 0) _ = Task.Delay(3000).ContinueWith(_ => { scoreDelta = 0; InvokeAsync(StateHasChanged); });
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex){ isProcessingTurn = false; Console.WriteLine($"Error handling turn result: {ex.Message}"); }
    }

    [JSInvokable] public void ProcessSttResultInstance(string text, double confidence){ currentTranscript = text; isPartialTranscript = confidence < 0.8; InvokeAsync(StateHasChanged); }
    [JSInvokable] public void HandleSttErrorInstance(string error){ blockReason = $"Speech recognition error: {error}"; isBlocked = true; isProcessingTurn = false; InvokeAsync(StateHasChanged); }

    private string GetLessonSummary()
    {
        if (learningObjectives.Any()) return string.Join(", ", learningObjectives.Take(2));
        return scenario?.Kind ?? "Aviation communication practice";
    }

    private string GetInitialPrompt()
    {
        var op = scenario?.OperationType ?? scenario?.Kind ?? string.Empty;
        if (op.Contains("Taxi", StringComparison.OrdinalIgnoreCase))
            return "Initiate with a basic taxi request: '[Airport] Ground, [Callsign], at [Location], with ATIS [Letter], request taxi.'";
        if (op.Contains("Departure", StringComparison.OrdinalIgnoreCase))
            return "Provide a departure request including callsign, aircraft type, position and intentions.";
        if (op.Contains("Circuit", StringComparison.OrdinalIgnoreCase) || op.Contains("Pattern", StringComparison.OrdinalIgnoreCase))
            return "Report ready / position with circuit intentions and runway awareness.";
        if (op.Contains("Approach", StringComparison.OrdinalIgnoreCase) || op.Contains("Arrival", StringComparison.OrdinalIgnoreCase))
            return "Make initial approach call: position, altitude, ATIS received, intentions.";
        return "Use proper Australian phraseology. Include callsign and required elements.";
    }

    private void ToggleBreakdown() => showBreakdown = !showBreakdown;
    private void GoBack() => Navigation.NavigateTo("/scenarios");

    public async ValueTask DisposeAsync(){ if (hubConnection is not null) await hubConnection.DisposeAsync(); dotNetRef?.Dispose(); }

    // DTOs
    private class InstructorVerdictDto { public List<string>? Critical { get; set; } public List<string>? Improvements { get; set; } public string? ExemplarReadback { get; set; } public double Normalized { get; set; } public int ScoreDelta { get; set; } public string? BlockReason { get; set; } public List<ComponentScoreDto>? Components { get; set; } public double? PhraseAccuracy { get; set; } public double? Ordering { get; set; } public double? Omissions { get; set; } public double? Safety { get; set; } public bool? SafetyFlag { get; set; } public string? RubricVersion { get; set; } }
    private class ComponentScoreDto { public string Code { get; set; } = string.Empty; public string Category { get; set; } = string.Empty; public string Severity { get; set; } = string.Empty; public double? Weight { get; set; } public double? Score { get; set; } public double? Delta { get; set; } public string? Detail { get; set; } }
    private class AtcReplyDto { public string? Transmission { get; set; } public List<string>? ExpectedReadback { get; set; } public JsonElement? NextState { get; set; } public bool? HoldShort { get; set; } public string? TtsTone { get; set; } }
    private class TurnResultDto { public string? Transcript { get; set; } public InstructorVerdictDto? Verdict { get; set; } public AtcReplyDto? AtcResponse { get; set; } public string? TtsAudioPath { get; set; } }
    private record DeviceTestResult(bool Success, string Message);
}
