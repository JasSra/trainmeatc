@page "/simulation/{scenarioId:int}"
@using Microsoft.AspNetCore.Components
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.SignalR.Client
@using PilotSim.Data
@using PilotSim.Data.Models
@using System.Net.Http.Json
@using System.Text.Json
@inject NavigationManager Navigation
@inject SimDbContext DbContext
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<PageTitle>Live Simulation - TrainMeATC</PageTitle>

<div class="container-fluid vh-100 p-0">
    @if (scenario == null)
    {
        <div class="d-flex justify-content-center align-items-center h-100">
            <div class="text-center">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p>Loading scenario...</p>
            </div>
        </div>
    }
    else if (currentSession == null)
    {
        <div class="container-fluid py-4">
            <div class="row justify-content-center">
                <div class="col-md-8">
                    <div class="aviation-panel">
                        <div class="aviation-panel-header">
                            <i class="bi bi-airplane-engines"></i>
                            Training Session Setup
                        </div>
                        
                        <div class="row">
                            <div class="col-md-8">
                                <h3>@scenario.Name</h3>
                                <p class="text-muted mb-3">@(scenario.Kind ?? "Aviation communication training scenario")</p>
                                
                                <div class="row mb-4">
                                    <div class="col-md-6">
                                        <h6><i class="bi bi-geo-alt me-1"></i>Airport</h6>
                                        <p class="mb-2"><strong>@scenario.AirportIcao</strong></p>
                                        
                                        <h6><i class="bi bi-speedometer me-1"></i>Difficulty</h6>
                                        <span class="scenario-difficulty difficulty-@(scenario.Difficulty?.ToLower() ?? "basic")">
                                            @(scenario.Difficulty ?? "Basic")
                                        </span>
                                    </div>
                                    <div class="col-md-6">
                                        <h6><i class="bi bi-headphones me-1"></i>Audio Check</h6>
                                        <p class="text-muted mb-2">Ensure your microphone is working properly</p>
                                        <button class="btn btn-outline-primary btn-sm" @onclick="TestMicrophone">
                                            <i class="bi bi-mic-fill me-1"></i>Test Microphone
                                        </button>
                                        @if (microphoneTestResult != null)
                                        {
                                            <div class="mt-2">
                                                <small class="text-@(microphoneTestResult.Value ? "success" : "danger")">
                                                    <i class="bi bi-@(microphoneTestResult.Value ? "check-circle" : "x-circle") me-1"></i>
                                                    @(microphoneTestResult.Value ? "Microphone working" : "Microphone issue detected")
                                                </small>
                                            </div>
                                        }
                                    </div>
                                </div>
                                
                                <div class="alert alert-info">
                                    <i class="bi bi-info-circle me-2"></i>
                                    <strong>Session Instructions:</strong>
                                    Use professional aviation phraseology. Press and hold the microphone button while speaking. 
                                    Follow ATC instructions promptly and acknowledge all communications.
                                </div>
                            </div>
                            <div class="col-md-4 text-center">
                                <div class="aviation-panel-header">
                                    <i class="bi bi-shield-check"></i>
                                    Session Ready
                                </div>
                                <p class="text-muted mb-4">All systems operational and ready for training.</p>
                                
                                <div class="d-grid gap-2">
                                    <button class="btn btn-aviation-primary btn-lg" @onclick="StartSession">
                                        <i class="bi bi-play-fill me-2"></i>Start Training Session
                                    </button>
                                    <button class="btn btn-outline-secondary" @onclick="GoBack">
                                        <i class="bi bi-arrow-left me-2"></i>Back to Scenarios
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
    else
    {
        <!-- Professional Aviation Training Interface -->
        <div class="container-fluid py-3">
            <div class="row g-3">
                <!-- Session Header -->
                <div class="col-12">
                    <div class="aviation-panel">
                        <div class="aviation-panel-header">
                            <i class="bi bi-broadcast"></i>
                            Live Training Session - @scenario.Name
                        </div>
                        <div class="row align-items-center">
                            <div class="col-md-6">
                                <div class="session-status @(isRecording ? "recording" : "active")">
                                    <i class="bi bi-@(isRecording ? "mic-fill" : "radio") me-1"></i>
                                    @(isRecording ? "Recording" : "Active")
                                </div>
                                <small class="text-muted">@scenario.AirportIcao â€¢ Session @currentSession.Id</small>
                            </div>
                            <div class="col-md-6 text-end">
                                <div class="score-display">
                                    <span class="score-value">@totalScore</span>
                                    <span class="score-label">Score</span>
                                    @if (scoreDelta != 0)
                                    {
                                        <div class="score-delta @(scoreDelta > 0 ? "positive" : "negative")">
                                            @(scoreDelta > 0 ? "+" : "")@scoreDelta
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Main Training Interface -->
                <div class="col-md-6">
                    <!-- Push to Talk Section -->
                    <div class="aviation-panel">
                        <div class="aviation-panel-header">
                            <i class="bi bi-mic"></i>
                            Radio Communication
                        </div>
                        
                        <div class="text-center mb-4">
                            <button class="btn push-to-talk @(isRecording ? "recording" : "btn-aviation-primary") btn-lg"
                                    @onmousedown="StartRecording"
                                    @onmouseup="StopRecording"
                                    @ontouchstart="StartRecording"
                                    @ontouchend="StopRecording"
                                    disabled="@isBlocked">
                                <i class="bi bi-@(isRecording ? "mic-fill" : "mic") me-2"></i>
                                @(isRecording ? "TRANSMITTING" : (isBlocked ? "BLOCKED" : "PUSH TO TALK"))
                            </button>
                        </div>

                        <!-- Audio Level Meter -->
                        <div class="audio-level-meter">
                            <div class="audio-level-bar" style="width: @(audioLevel * 100)%"></div>
                        </div>
                        <small class="text-muted">Audio Level: @((int)(audioLevel * 100))%</small>

                        <!-- Block/Error Display -->
                        @if (isBlocked && !string.IsNullOrEmpty(blockReason))
                        {
                            <div class="retry-banner mt-3">
                                <div class="retry-message">
                                    <i class="bi bi-exclamation-triangle"></i>
                                    <span>@blockReason</span>
                                </div>
                                <div class="retry-actions">
                                    <button class="btn btn-sm btn-outline-light" @onclick="ClearBlock">
                                        <i class="bi bi-arrow-clockwise me-1"></i>Retry
                                    </button>
                                </div>
                            </div>
                        }
                    </div>

                    <!-- Transcript Display -->
                    <div class="aviation-panel">
                        <div class="aviation-panel-header">
                            <i class="bi bi-chat-dots"></i>
                            Live Transcript
                        </div>
                        <div class="transcript-container">
                            @if (!string.IsNullOrEmpty(currentTranscript))
                            {
                                <div class="@(isPartialTranscript ? "transcript-partial" : "transcript-final")">
                                    @currentTranscript
                                </div>
                            }
                            else
                            {
                                <div class="text-muted">Your communications will appear here...</div>
                            }
                        </div>
                        @if (isPartialTranscript)
                        {
                            <small class="text-info">
                                <i class="bi bi-typing me-1"></i>Processing speech...
                            </small>
                        }
                    </div>
                </div>

                <!-- Right Panel: ATC and Feedback -->
                <div class="col-md-6">
                    <!-- ATC Communications -->
                    <div class="aviation-panel">
                        <div class="aviation-panel-header">
                            <i class="bi bi-tower"></i>
                            Air Traffic Control
                        </div>
                        
                        @if (!string.IsNullOrEmpty(lastAtcTransmission))
                        {
                            <div class="atc-transmission p-3 mb-3">
                                <div class="d-flex justify-content-between align-items-start mb-2">
                                    <strong class="text-aviation-primary">Melbourne Tower:</strong>
                                    <button class="btn btn-sm btn-outline-secondary" @onclick="PlayAtcAudio">
                                        <i class="bi bi-volume-up"></i>
                                    </button>
                                </div>
                                <p class="mb-0">@lastAtcTransmission</p>
                            </div>
                        }
                        else
                        {
                            <div class="text-muted p-3">
                                <i class="bi bi-headphones me-2"></i>
                                Listening for ATC communications...
                            </div>
                        }
                    </div>

                    <!-- Session Progress -->
                    <div class="aviation-panel">
                        <div class="aviation-panel-header">
                            <i class="bi bi-list-check"></i>
                            Session Progress
                        </div>
                        
                        @if (completedTurns.Any())
                        {
                            <div class="timeline">
                                @foreach (var turn in completedTurns.TakeLast(5))
                                {
                                    <div class="timeline-item">
                                        <div class="timeline-marker">
                                            <i class="bi bi-check"></i>
                                        </div>
                                        <div class="timeline-content">
                                            <small class="text-muted">Turn @turn.Idx</small>
                                            <p class="mb-1">@turn.UserTranscript</p>
                                            <small class="text-success">Completed</small>
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                        else
                        {
                            <div class="text-muted p-3">
                                <i class="bi bi-clock me-2"></i>
                                Session starting...
                            </div>
                        }
                    </div>

                    <!-- Session Controls -->
                    <div class="aviation-panel">
                        <div class="aviation-panel-header">
                            <i class="bi bi-gear"></i>
                            Session Controls
                        </div>
                        <div class="d-grid gap-2">
                            <button class="btn btn-aviation-danger" @onclick="EndSession">
                                <i class="bi bi-stop-fill me-2"></i>End Session
                            </button>
                            <small class="text-muted text-center">
                                Use this to end your training session and view your debrief.
                            </small>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<!-- Audio element for TTS playback -->
<audio id="tts-audio" preload="none"></audio>

@code {
    [Parameter] public int ScenarioId { get; set; }
    
    private Scenario? scenario;
    private Session? currentSession;
    private List<Turn> completedTurns = new();
    
    private HubConnection? hubConnection;
    private bool isRecording = false;
    private bool isBlocked = false;
    private string? blockReason;
    private string currentTranscript = "";
    private bool isPartialTranscript = false;
    private string? lastAtcTransmission;
    private string? lastTtsAudioPath;
    private int totalScore = 0;
    private int scoreDelta = 0;
    private double audioLevel = 0;
    private bool? microphoneTestResult = null;
    
    protected override async Task OnInitializedAsync()
    {
        // Load scenario
        scenario = await DbContext.Scenarios
            .Include(s => s.Airport)
            .FirstOrDefaultAsync(s => s.Id == ScenarioId);
            
        if (scenario == null)
        {
            Navigation.NavigateTo("/scenarios");
            return;
        }
        
        // Initialize SignalR connection
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/hubs/live"))
            .Build();
            
        // Set up SignalR event handlers
        hubConnection.On<string>("partialTranscript", (transcript) =>
        {
            currentTranscript = transcript;
            isPartialTranscript = true;
            InvokeAsync(StateHasChanged);
        });
        
        hubConnection.On<string>("instructorVerdict", async (verdictJson) =>
        {
            var verdict = JsonSerializer.Deserialize<dynamic>(verdictJson);
            // Handle instructor verdict - for now just clear partial transcript
            isPartialTranscript = false;
            await InvokeAsync(StateHasChanged);
        });
        
        hubConnection.On<string>("atcTransmission", (transmission) =>
        {
            lastAtcTransmission = transmission;
            InvokeAsync(StateHasChanged);
        });
        
        hubConnection.On<string>("ttsReady", (audioPath) =>
        {
            lastTtsAudioPath = audioPath;
            InvokeAsync(StateHasChanged);
        });
        
        hubConnection.On<int>("scoreTick", (delta) =>
        {
            scoreDelta = delta;
            totalScore += delta;
            InvokeAsync(StateHasChanged);
            
            // Clear score delta after a delay
            Task.Delay(3000).ContinueWith(_ =>
            {
                scoreDelta = 0;
                InvokeAsync(StateHasChanged);
            });
        });
        
        await hubConnection.StartAsync();
    }
    
    private async Task StartSession()
    {
        if (scenario == null) return;
        
        try
        {
            var sessionRequest = new
            {
                ScenarioId = scenario.Id,
                Difficulty = scenario.Difficulty ?? "Basic"
            };
            
            var response = await Http.PostAsJsonAsync("/api/session", sessionRequest);
            if (response.IsSuccessStatusCode)
            {
                var sessionId = await response.Content.ReadFromJsonAsync<int>();
                currentSession = new Session 
                { 
                    Id = sessionId,
                    ScenarioId = scenario.Id,
                    StartedUtc = DateTime.UtcNow.ToString("O"),
                    Difficulty = scenario.Difficulty ?? "Basic"
                };
                
                // Join the SignalR group for this session
                if (hubConnection != null && hubConnection.State == HubConnectionState.Connected)
                {
                    await hubConnection.InvokeAsync("JoinSession", sessionId.ToString());
                }
                
                // Set up audio callbacks
                await SetupAudioCallbacks();
                
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error starting session: {ex.Message}");
            // Handle error - create a fallback session for testing
            currentSession = new Session 
            { 
                Id = Random.Shared.Next(1000, 9999),
                ScenarioId = scenario.Id,
                StartedUtc = DateTime.UtcNow.ToString("O"),
                Difficulty = scenario.Difficulty ?? "Basic"
            };
            
            // Still set up audio callbacks for testing
            await SetupAudioCallbacks();
            StateHasChanged();
        }
    }
    
    private async Task StartRecording()
    {
        if (isBlocked) return;
        
        isRecording = true;
        try
        {
            await JSRuntime.InvokeVoidAsync("startAudioCapture");
        }
        catch (Exception ex)
        {
            // Handle JS interop error
            Console.WriteLine($"Error starting recording: {ex.Message}");
        }
    }
    
    private async Task StopRecording()
    {
        if (!isRecording) return;
        
        isRecording = false;
        try
        {
            await JSRuntime.InvokeVoidAsync("stopAudioCapture");
        }
        catch (Exception ex)
        {
            // Handle JS interop error
            Console.WriteLine($"Error stopping recording: {ex.Message}");
        }
    }
    
    private void ClearBlock()
    {
        isBlocked = false;
        blockReason = null;
    }
    
    private async Task PlayAtcAudio()
    {
        if (!string.IsNullOrEmpty(lastTtsAudioPath))
        {
            try
            {
                await JSRuntime.InvokeVoidAsync("playAudio", "tts-audio", lastTtsAudioPath);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error playing audio: {ex.Message}");
            }
        }
    }
    
    private async Task EndSession()
    {
        if (currentSession != null)
        {
            try
            {
                await Http.PostAsJsonAsync($"/api/session/{currentSession.Id}/end", new { });
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error ending session: {ex.Message}");
            }
        }
        
        Navigation.NavigateTo($"/debrief/{currentSession?.Id}");
    }
    
    private async Task TestMicrophone()
    {
        try
        {
            // Test microphone access
            var hasAccess = await JSRuntime.InvokeAsync<bool>("isAudioCaptureSupported");
            if (hasAccess)
            {
                // Try to get audio devices
                var devices = await JSRuntime.InvokeAsync<object[]>("getAudioDevices");
                microphoneTestResult = devices?.Length > 0;
            }
            else
            {
                microphoneTestResult = false;
            }
        }
        catch
        {
            microphoneTestResult = false;
        }
        
        StateHasChanged();
    }

    private async Task SetupAudioCallbacks()
    {
        // Set the current session ID in JavaScript for audio processing
        if (currentSession != null)
        {
            await JSRuntime.InvokeVoidAsync("eval", $"window.currentSessionId = '{currentSession.Id}';");
        }
        
        // Set up JavaScript callbacks for audio level updates and STT results
        await JSRuntime.InvokeVoidAsync("eval", @"
            window.blazorAudioLevelCallback = (level) => {
                if (window.blazorInstance) {
                    window.blazorInstance.invokeMethodAsync('UpdateAudioLevelInstance', level);
                }
            };
            
            window.blazorSttCallback = (text, confidence) => {
                if (window.blazorInstance) {
                    window.blazorInstance.invokeMethodAsync('ProcessSttResultInstance', text, confidence);
                }
            };
            
            window.blazorSttErrorCallback = (error) => {
                if (window.blazorInstance) {
                    window.blazorInstance.invokeMethodAsync('HandleSttErrorInstance', error);
                }
            };
        ");
        
        // Store this component instance for callbacks
        await JSRuntime.InvokeVoidAsync("eval", "window.blazorInstance = DotNet.createJSObjectReference(arguments[0]);", DotNetObjectReference.Create(this));
    }

    [JSInvokable]
    public void UpdateAudioLevelInstance(double level)
    {
        audioLevel = level;
        InvokeAsync(StateHasChanged);
    }

    [JSInvokable]  
    public void ProcessSttResultInstance(string text, double confidence)
    {
        currentTranscript = text;
        isPartialTranscript = confidence < 0.8;
        InvokeAsync(StateHasChanged);
    }

    [JSInvokable]
    public void HandleSttErrorInstance(string error)
    {
        blockReason = $"Speech recognition error: {error}";
        isBlocked = true;
        InvokeAsync(StateHasChanged);
    }

    [JSInvokable]
    public static void UpdateAudioLevel(double level)
    {
        // Legacy static method - kept for backward compatibility
        Console.WriteLine($"Audio Level: {level * 100:F0}%");
    }

    [JSInvokable]  
    public static void ProcessSttResult(string text, double confidence)
    {
        // Legacy static method - kept for backward compatibility
        Console.WriteLine($"STT Result: {text} (confidence: {confidence})");
    }

    [JSInvokable]
    public static void HandleSttError(string error)
    {
        // Legacy static method - kept for backward compatibility
        Console.WriteLine($"STT Error: {error}");
    }
    
    private void GoBack()
    {
        Navigation.NavigateTo("/scenarios");
    }
    
    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}