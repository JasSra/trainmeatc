@inherits LayoutComponentBase
@inject IJSRuntime JSRuntime

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4 d-flex justify-content-between align-items-center">
            <div class="breadcrumb-container">
                <!-- Breadcrumb could be added here based on current page -->
            </div>
            <div class="d-flex align-items-center">
                <small class="text-muted me-3">Professional Pilot Training System</small>
                <button class="btn btn-sm btn-outline-secondary" @onclick="ToggleDarkMode" title="Toggle Dark Mode">
                    <i class="bi bi-@(isDarkMode ? "sun" : "moon")"></i>
                </button>
            </div>
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

<div id="blazor-error-ui" data-nosnippet>
    <div class="d-flex align-items-center">
        <i class="bi bi-exclamation-triangle me-2 text-warning"></i>
        An unexpected error occurred.
    </div>
    <a href="." class="reload btn btn-primary btn-sm">
        <i class="bi bi-arrow-clockwise me-1"></i>Reload
    </a>
    <span class="dismiss">
        <i class="bi bi-x-lg"></i>
    </span>
</div>

@code {
    private bool isDarkMode;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                var theme = await JSRuntime.InvokeAsync<string>("themeManager.initialize");
                isDarkMode = string.Equals(theme, "dark", StringComparison.OrdinalIgnoreCase);
            }
            catch
            {
                isDarkMode = false;
            }

            StateHasChanged();
        }
    }

    private async Task ToggleDarkMode()
    {
        try
        {
            var theme = await JSRuntime.InvokeAsync<string>("themeManager.toggleTheme");
            isDarkMode = string.Equals(theme, "dark", StringComparison.OrdinalIgnoreCase);
        }
        catch
        {
            isDarkMode = !isDarkMode;
        }

        StateHasChanged();
    }
}
